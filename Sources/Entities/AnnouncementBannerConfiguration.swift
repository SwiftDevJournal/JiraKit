// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Announcement banner configuration.
public struct AnnouncementBannerConfiguration: Codable {
    /// The text on the announcement banner.
    public var message: String?
    /// Flag indicating if the announcement banner can be dismissed by the user.
    public var isDismissible: Bool?
    /// Flag indicating if the announcement banner is enabled or not.
    public var isEnabled: Bool?
    /// Hash of the banner data. The client detects updates by comparing hash IDs.
    public var hashID: String?
    /// Visibility of the announcement banner.
    public var visibility: Visibility?

    /// Visibility of the announcement banner.
    public enum Visibility: String, Codable, CaseIterable {
        case `public` = "PUBLIC"
        case `private` = "PRIVATE"
    }

    public init(message: String? = nil, isDismissible: Bool? = nil, isEnabled: Bool? = nil, hashID: String? = nil, visibility: Visibility? = nil) {
        self.message = message
        self.isDismissible = isDismissible
        self.isEnabled = isEnabled
        self.hashID = hashID
        self.visibility = visibility
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.message = try values.decodeIfPresent(String.self, forKey: "message")
        self.isDismissible = try values.decodeIfPresent(Bool.self, forKey: "isDismissible")
        self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "isEnabled")
        self.hashID = try values.decodeIfPresent(String.self, forKey: "hashId")
        self.visibility = try values.decodeIfPresent(Visibility.self, forKey: "visibility")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(message, forKey: "message")
        try values.encodeIfPresent(isDismissible, forKey: "isDismissible")
        try values.encodeIfPresent(isEnabled, forKey: "isEnabled")
        try values.encodeIfPresent(hashID, forKey: "hashId")
        try values.encodeIfPresent(visibility, forKey: "visibility")
    }
}
