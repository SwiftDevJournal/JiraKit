// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Configuration of the announcement banner.
public struct AnnouncementBannerConfigurationUpdate: Codable {
    /// The text on the announcement banner.
    public var message: String?
    /// Flag indicating if the announcement banner can be dismissed by the user.
    public var isDismissible: Bool?
    /// Flag indicating if the announcement banner is enabled or not.
    public var isEnabled: Bool?
    /// Visibility of the announcement banner. Can be public or private.
    public var visibility: String?

    public init(message: String? = nil, isDismissible: Bool? = nil, isEnabled: Bool? = nil, visibility: String? = nil) {
        self.message = message
        self.isDismissible = isDismissible
        self.isEnabled = isEnabled
        self.visibility = visibility
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.message = try values.decodeIfPresent(String.self, forKey: "message")
        self.isDismissible = try values.decodeIfPresent(Bool.self, forKey: "isDismissible")
        self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "isEnabled")
        self.visibility = try values.decodeIfPresent(String.self, forKey: "visibility")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(message, forKey: "message")
        try values.encodeIfPresent(isDismissible, forKey: "isDismissible")
        try values.encodeIfPresent(isEnabled, forKey: "isEnabled")
        try values.encodeIfPresent(visibility, forKey: "visibility")
    }
}
