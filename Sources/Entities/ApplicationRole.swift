// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an application role.
public struct ApplicationRole: Codable {
    /// The key of the application role.
    public var key: String?
    /// The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
    public var groups: [String]?
    /// The groups associated with the application role.
    public var groupDetails: [GroupName]?
    /// The display name of the application role.
    public var name: String?
    /// The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
    public var defaultGroups: [String]?
    /// The groups that are granted default access for this application role.
    public var defaultGroupsDetails: [GroupName]?
    /// Determines whether this application role should be selected by default on user creation.
    public var isSelectedByDefault: Bool?
    /// Deprecated.
    public var isDefined: Bool?
    /// The maximum count of users on your license.
    public var numberOfSeats: Int?
    /// The count of users remaining on your license.
    public var remainingSeats: Int?
    /// The number of users counting against your license.
    public var userCount: Int?
    /// The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
    public var userCountDescription: String?
    public var hasUnlimitedSeats: Bool?
    /// Indicates if the application role belongs to Jira platform (`jira-core`).
    public var isPlatform: Bool?

    public init(key: String? = nil, groups: [String]? = nil, groupDetails: [GroupName]? = nil, name: String? = nil, defaultGroups: [String]? = nil, defaultGroupsDetails: [GroupName]? = nil, isSelectedByDefault: Bool? = nil, isDefined: Bool? = nil, numberOfSeats: Int? = nil, remainingSeats: Int? = nil, userCount: Int? = nil, userCountDescription: String? = nil, hasUnlimitedSeats: Bool? = nil, isPlatform: Bool? = nil) {
        self.key = key
        self.groups = groups
        self.groupDetails = groupDetails
        self.name = name
        self.defaultGroups = defaultGroups
        self.defaultGroupsDetails = defaultGroupsDetails
        self.isSelectedByDefault = isSelectedByDefault
        self.isDefined = isDefined
        self.numberOfSeats = numberOfSeats
        self.remainingSeats = remainingSeats
        self.userCount = userCount
        self.userCountDescription = userCountDescription
        self.hasUnlimitedSeats = hasUnlimitedSeats
        self.isPlatform = isPlatform
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.groups = try values.decodeIfPresent([String].self, forKey: "groups")
        self.groupDetails = try values.decodeIfPresent([GroupName].self, forKey: "groupDetails")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.defaultGroups = try values.decodeIfPresent([String].self, forKey: "defaultGroups")
        self.defaultGroupsDetails = try values.decodeIfPresent([GroupName].self, forKey: "defaultGroupsDetails")
        self.isSelectedByDefault = try values.decodeIfPresent(Bool.self, forKey: "selectedByDefault")
        self.isDefined = try values.decodeIfPresent(Bool.self, forKey: "defined")
        self.numberOfSeats = try values.decodeIfPresent(Int.self, forKey: "numberOfSeats")
        self.remainingSeats = try values.decodeIfPresent(Int.self, forKey: "remainingSeats")
        self.userCount = try values.decodeIfPresent(Int.self, forKey: "userCount")
        self.userCountDescription = try values.decodeIfPresent(String.self, forKey: "userCountDescription")
        self.hasUnlimitedSeats = try values.decodeIfPresent(Bool.self, forKey: "hasUnlimitedSeats")
        self.isPlatform = try values.decodeIfPresent(Bool.self, forKey: "platform")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(groups, forKey: "groups")
        try values.encodeIfPresent(groupDetails, forKey: "groupDetails")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(defaultGroups, forKey: "defaultGroups")
        try values.encodeIfPresent(defaultGroupsDetails, forKey: "defaultGroupsDetails")
        try values.encodeIfPresent(isSelectedByDefault, forKey: "selectedByDefault")
        try values.encodeIfPresent(isDefined, forKey: "defined")
        try values.encodeIfPresent(numberOfSeats, forKey: "numberOfSeats")
        try values.encodeIfPresent(remainingSeats, forKey: "remainingSeats")
        try values.encodeIfPresent(userCount, forKey: "userCount")
        try values.encodeIfPresent(userCountDescription, forKey: "userCountDescription")
        try values.encodeIfPresent(hasUnlimitedSeats, forKey: "hasUnlimitedSeats")
        try values.encodeIfPresent(isPlatform, forKey: "platform")
    }
}
