// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Metadata for an archive (for example a zip) and its contents.
public struct AttachmentArchiveMetadataReadable: Codable {
    /// The ID of the attachment.
    public var id: Int64?
    /// The name of the archive file.
    public var name: String?
    /// The list of the items included in the archive.
    public var entries: [AttachmentArchiveItemReadable]?
    /// The number of items included in the archive.
    public var totalEntryCount: Int64?
    /// The MIME type of the attachment.
    public var mediaType: String?

    public init(id: Int64? = nil, name: String? = nil, entries: [AttachmentArchiveItemReadable]? = nil, totalEntryCount: Int64? = nil, mediaType: String? = nil) {
        self.id = id
        self.name = name
        self.entries = entries
        self.totalEntryCount = totalEntryCount
        self.mediaType = mediaType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Int64.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.entries = try values.decodeIfPresent([AttachmentArchiveItemReadable].self, forKey: "entries")
        self.totalEntryCount = try values.decodeIfPresent(Int64.self, forKey: "totalEntryCount")
        self.mediaType = try values.decodeIfPresent(String.self, forKey: "mediaType")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(entries, forKey: "entries")
        try values.encodeIfPresent(totalEntryCount, forKey: "totalEntryCount")
        try values.encodeIfPresent(mediaType, forKey: "mediaType")
    }
}
