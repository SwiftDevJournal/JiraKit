// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Metadata for an issue attachment.
public struct AttachmentMetadata: Codable {
    /// The ID of the attachment.
    public var id: Int?
    /// The URL of the attachment metadata details.
    public var this: URL?
    /// The name of the attachment file.
    public var filename: String?
    /// Details of the user who attached the file.
    public var author: User?
    /// The datetime the attachment was created.
    public var created: Date?
    /// The size of the attachment.
    public var size: Int?
    /// The MIME type of the attachment.
    public var mimeType: String?
    /// Additional properties of the attachment.
    public var properties: [String: AnyJSON]?
    /// The URL of the attachment.
    public var content: String?
    /// The URL of a thumbnail representing the attachment.
    public var thumbnail: String?

    public init(id: Int? = nil, this: URL? = nil, filename: String? = nil, author: User? = nil, created: Date? = nil, size: Int? = nil, mimeType: String? = nil, properties: [String: AnyJSON]? = nil, content: String? = nil, thumbnail: String? = nil) {
        self.id = id
        self.this = this
        self.filename = filename
        self.author = author
        self.created = created
        self.size = size
        self.mimeType = mimeType
        self.properties = properties
        self.content = content
        self.thumbnail = thumbnail
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Int.self, forKey: "id")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.filename = try values.decodeIfPresent(String.self, forKey: "filename")
        self.author = try values.decodeIfPresent(User.self, forKey: "author")
        self.created = try values.decodeIfPresent(Date.self, forKey: "created")
        self.size = try values.decodeIfPresent(Int.self, forKey: "size")
        self.mimeType = try values.decodeIfPresent(String.self, forKey: "mimeType")
        self.properties = try values.decodeIfPresent([String: AnyJSON].self, forKey: "properties")
        self.content = try values.decodeIfPresent(String.self, forKey: "content")
        self.thumbnail = try values.decodeIfPresent(String.self, forKey: "thumbnail")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(filename, forKey: "filename")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(created, forKey: "created")
        try values.encodeIfPresent(size, forKey: "size")
        try values.encodeIfPresent(mimeType, forKey: "mimeType")
        try values.encodeIfPresent(properties, forKey: "properties")
        try values.encodeIfPresent(content, forKey: "content")
        try values.encodeIfPresent(thumbnail, forKey: "thumbnail")
    }
}
