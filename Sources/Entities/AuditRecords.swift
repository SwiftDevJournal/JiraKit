// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Container for a list of audit records.
public struct AuditRecords: Codable {
    /// The number of audit items skipped before the first item in this list.
    public var offset: Int32?
    /// The requested or default limit on the number of audit items to be returned.
    public var limit: Int32?
    /// The total number of audit items returned.
    public var total: Int64?
    /// The list of audit items.
    public var records: [AuditRecordBean]?

    public init(offset: Int32? = nil, limit: Int32? = nil, total: Int64? = nil, records: [AuditRecordBean]? = nil) {
        self.offset = offset
        self.limit = limit
        self.total = total
        self.records = records
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.offset = try values.decodeIfPresent(Int32.self, forKey: "offset")
        self.limit = try values.decodeIfPresent(Int32.self, forKey: "limit")
        self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
        self.records = try values.decodeIfPresent([AuditRecordBean].self, forKey: "records")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(offset, forKey: "offset")
        try values.encodeIfPresent(limit, forKey: "limit")
        try values.encodeIfPresent(total, forKey: "total")
        try values.encodeIfPresent(records, forKey: "records")
    }
}
