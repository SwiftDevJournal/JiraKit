// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an avatar.
public struct Avatar: Codable {
    /// The ID of the avatar.
    public var id: String
    /// The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
    public var owner: String?
    /// Whether the avatar is a system avatar.
    public var isSystemAvatar: Bool?
    /// Whether the avatar is used in Jira. For example, shown as a project's avatar.
    public var isSelected: Bool?
    /// Whether the avatar can be deleted.
    public var isDeletable: Bool?
    /// The file name of the avatar icon. Returned for system avatars.
    public var fileName: String?
    /// The list of avatar icon URLs.
    public var urls: [String: URL]?

    public init(id: String, owner: String? = nil, isSystemAvatar: Bool? = nil, isSelected: Bool? = nil, isDeletable: Bool? = nil, fileName: String? = nil, urls: [String: URL]? = nil) {
        self.id = id
        self.owner = owner
        self.isSystemAvatar = isSystemAvatar
        self.isSelected = isSelected
        self.isDeletable = isDeletable
        self.fileName = fileName
        self.urls = urls
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.owner = try values.decodeIfPresent(String.self, forKey: "owner")
        self.isSystemAvatar = try values.decodeIfPresent(Bool.self, forKey: "isSystemAvatar")
        self.isSelected = try values.decodeIfPresent(Bool.self, forKey: "isSelected")
        self.isDeletable = try values.decodeIfPresent(Bool.self, forKey: "isDeletable")
        self.fileName = try values.decodeIfPresent(String.self, forKey: "fileName")
        self.urls = try values.decodeIfPresent([String: URL].self, forKey: "urls")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(owner, forKey: "owner")
        try values.encodeIfPresent(isSystemAvatar, forKey: "isSystemAvatar")
        try values.encodeIfPresent(isSelected, forKey: "isSelected")
        try values.encodeIfPresent(isDeletable, forKey: "isDeletable")
        try values.encodeIfPresent(fileName, forKey: "fileName")
        try values.encodeIfPresent(urls, forKey: "urls")
    }
}
