// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A change item.
public struct ChangeDetails: Codable {
    /// The name of the field changed.
    public var field: String?
    /// The type of the field changed.
    public var fieldtype: String?
    /// The ID of the field changed.
    public var fieldID: String?
    /// The details of the original value.
    public var from: String?
    /// The details of the original value as a string.
    public var fromString: String?
    /// The details of the new value.
    public var to: String?
    /// The details of the new value as a string.
    public var toString: String?

    public init(field: String? = nil, fieldtype: String? = nil, fieldID: String? = nil, from: String? = nil, fromString: String? = nil, to: String? = nil, toString: String? = nil) {
        self.field = field
        self.fieldtype = fieldtype
        self.fieldID = fieldID
        self.from = from
        self.fromString = fromString
        self.to = to
        self.toString = toString
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.field = try values.decodeIfPresent(String.self, forKey: "field")
        self.fieldtype = try values.decodeIfPresent(String.self, forKey: "fieldtype")
        self.fieldID = try values.decodeIfPresent(String.self, forKey: "fieldId")
        self.from = try values.decodeIfPresent(String.self, forKey: "from")
        self.fromString = try values.decodeIfPresent(String.self, forKey: "fromString")
        self.to = try values.decodeIfPresent(String.self, forKey: "to")
        self.toString = try values.decodeIfPresent(String.self, forKey: "toString")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(field, forKey: "field")
        try values.encodeIfPresent(fieldtype, forKey: "fieldtype")
        try values.encodeIfPresent(fieldID, forKey: "fieldId")
        try values.encodeIfPresent(from, forKey: "from")
        try values.encodeIfPresent(fromString, forKey: "fromString")
        try values.encodeIfPresent(to, forKey: "to")
        try values.encodeIfPresent(toString, forKey: "toString")
    }
}
