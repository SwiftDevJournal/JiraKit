// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A changelog.
public struct Changelog: Codable {
    /// The ID of the changelog.
    public var id: String?
    /// The user who made the change.
    public var author: UserDetails?
    /// The date on which the change took place.
    public var created: Date?
    /// The list of items changed.
    public var items: [ChangeDetails]?
    /// The history metadata associated with the changed.
    public var historyMetadata: HistoryMetadata?

    public init(id: String? = nil, author: UserDetails? = nil, created: Date? = nil, items: [ChangeDetails]? = nil, historyMetadata: HistoryMetadata? = nil) {
        self.id = id
        self.author = author
        self.created = created
        self.items = items
        self.historyMetadata = historyMetadata
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.author = try values.decodeIfPresent(UserDetails.self, forKey: "author")
        self.created = try values.decodeIfPresent(Date.self, forKey: "created")
        self.items = try values.decodeIfPresent([ChangeDetails].self, forKey: "items")
        self.historyMetadata = try values.decodeIfPresent(HistoryMetadata.self, forKey: "historyMetadata")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(created, forKey: "created")
        try values.encodeIfPresent(items, forKey: "items")
        try values.encodeIfPresent(historyMetadata, forKey: "historyMetadata")
    }
}
