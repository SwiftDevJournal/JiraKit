// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about the configuration of Jira.
public struct Configuration: Codable {
    /// Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    public var isVotingEnabled: Bool?
    /// Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    public var isWatchingEnabled: Bool?
    /// Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    public var isUnassignedIssuesAllowed: Bool?
    /// Whether the ability to create subtasks for issues is enabled.
    public var isSubTasksEnabled: Bool?
    /// Whether the ability to link issues is enabled.
    public var isIssueLinkingEnabled: Bool?
    /// Whether the ability to track time is enabled. This property is deprecated.
    public var isTimeTrackingEnabled: Bool?
    /// Whether the ability to add attachments to issues is enabled.
    public var isAttachmentsEnabled: Bool?
    /// The configuration of time tracking.
    public var timeTrackingConfiguration: TimeTrackingConfiguration?

    public init(isVotingEnabled: Bool? = nil, isWatchingEnabled: Bool? = nil, isUnassignedIssuesAllowed: Bool? = nil, isSubTasksEnabled: Bool? = nil, isIssueLinkingEnabled: Bool? = nil, isTimeTrackingEnabled: Bool? = nil, isAttachmentsEnabled: Bool? = nil, timeTrackingConfiguration: TimeTrackingConfiguration? = nil) {
        self.isVotingEnabled = isVotingEnabled
        self.isWatchingEnabled = isWatchingEnabled
        self.isUnassignedIssuesAllowed = isUnassignedIssuesAllowed
        self.isSubTasksEnabled = isSubTasksEnabled
        self.isIssueLinkingEnabled = isIssueLinkingEnabled
        self.isTimeTrackingEnabled = isTimeTrackingEnabled
        self.isAttachmentsEnabled = isAttachmentsEnabled
        self.timeTrackingConfiguration = timeTrackingConfiguration
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isVotingEnabled = try values.decodeIfPresent(Bool.self, forKey: "votingEnabled")
        self.isWatchingEnabled = try values.decodeIfPresent(Bool.self, forKey: "watchingEnabled")
        self.isUnassignedIssuesAllowed = try values.decodeIfPresent(Bool.self, forKey: "unassignedIssuesAllowed")
        self.isSubTasksEnabled = try values.decodeIfPresent(Bool.self, forKey: "subTasksEnabled")
        self.isIssueLinkingEnabled = try values.decodeIfPresent(Bool.self, forKey: "issueLinkingEnabled")
        self.isTimeTrackingEnabled = try values.decodeIfPresent(Bool.self, forKey: "timeTrackingEnabled")
        self.isAttachmentsEnabled = try values.decodeIfPresent(Bool.self, forKey: "attachmentsEnabled")
        self.timeTrackingConfiguration = try values.decodeIfPresent(TimeTrackingConfiguration.self, forKey: "timeTrackingConfiguration")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(isVotingEnabled, forKey: "votingEnabled")
        try values.encodeIfPresent(isWatchingEnabled, forKey: "watchingEnabled")
        try values.encodeIfPresent(isUnassignedIssuesAllowed, forKey: "unassignedIssuesAllowed")
        try values.encodeIfPresent(isSubTasksEnabled, forKey: "subTasksEnabled")
        try values.encodeIfPresent(isIssueLinkingEnabled, forKey: "issueLinkingEnabled")
        try values.encodeIfPresent(isTimeTrackingEnabled, forKey: "timeTrackingEnabled")
        try values.encodeIfPresent(isAttachmentsEnabled, forKey: "attachmentsEnabled")
        try values.encodeIfPresent(timeTrackingConfiguration, forKey: "timeTrackingConfiguration")
    }
}
