// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A list of custom field details.
public struct ConnectCustomFieldValue: Codable {
    /// The type of custom field.
    public var type: `Type`
    /// The issue ID.
    public var issueID: Int
    /// The custom field ID.
    public var fieldID: Int
    /// The value of string type custom field when `_type` is `StringIssueField`.
    public var string: String?
    /// The value of number type custom field when `_type` is `NumberIssueField`.
    public var number: Double?
    /// The value of richText type custom field when `_type` is `RichTextIssueField`.
    public var richText: String?
    /// The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.
    public var optionID: String?
    /// The value of of text custom field type when `_type` is `TextIssueField`.
    public var text: String?

    /// The type of custom field.
    public enum `Type`: String, Codable, CaseIterable {
        case stringIssueField = "StringIssueField"
        case numberIssueField = "NumberIssueField"
        case richTextIssueField = "RichTextIssueField"
        case singleSelectIssueField = "SingleSelectIssueField"
        case multiSelectIssueField = "MultiSelectIssueField"
        case textIssueField = "TextIssueField"
    }

    public init(type: `Type`, issueID: Int, fieldID: Int, string: String? = nil, number: Double? = nil, richText: String? = nil, optionID: String? = nil, text: String? = nil) {
        self.type = type
        self.issueID = issueID
        self.fieldID = fieldID
        self.string = string
        self.number = number
        self.richText = richText
        self.optionID = optionID
        self.text = text
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(`Type`.self, forKey: "_type")
        self.issueID = try values.decode(Int.self, forKey: "issueID")
        self.fieldID = try values.decode(Int.self, forKey: "fieldID")
        self.string = try values.decodeIfPresent(String.self, forKey: "string")
        self.number = try values.decodeIfPresent(Double.self, forKey: "number")
        self.richText = try values.decodeIfPresent(String.self, forKey: "richText")
        self.optionID = try values.decodeIfPresent(String.self, forKey: "optionID")
        self.text = try values.decodeIfPresent(String.self, forKey: "text")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "_type")
        try values.encode(issueID, forKey: "issueID")
        try values.encode(fieldID, forKey: "fieldID")
        try values.encodeIfPresent(string, forKey: "string")
        try values.encodeIfPresent(number, forKey: "number")
        try values.encodeIfPresent(richText, forKey: "richText")
        try values.encodeIfPresent(optionID, forKey: "optionID")
        try values.encodeIfPresent(text, forKey: "text")
    }
}
