// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The details of a created custom field context.
public struct CreateCustomFieldContext: Codable {
    /// The ID of the context.
    public var id: String?
    /// The name of the context.
    public var name: String
    /// The description of the context.
    public var description: String?
    /// The list of project IDs associated with the context. If the list is empty, the context is global.
    public var projectIDs: [String]?
    /// The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
    public var issueTypeIDs: [String]?

    public init(id: String? = nil, name: String, description: String? = nil, projectIDs: [String]? = nil, issueTypeIDs: [String]? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.projectIDs = projectIDs
        self.issueTypeIDs = issueTypeIDs
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.projectIDs = try values.decodeIfPresent([String].self, forKey: "projectIds")
        self.issueTypeIDs = try values.decodeIfPresent([String].self, forKey: "issueTypeIds")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(projectIDs, forKey: "projectIds")
        try values.encodeIfPresent(issueTypeIDs, forKey: "issueTypeIds")
    }
}
