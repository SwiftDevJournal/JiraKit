// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about the project.
public struct CreateProjectDetails: Codable {
    /// Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
    public var key: String
    /// The name of the project.
    public var name: String
    /// A brief description of the project.
    public var description: String?
    /// This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.
    public var lead: String?
    /// The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
    public var leadAccountID: String?
    /// A link to information about this project, such as project documentation
    public var url: String?
    /// The default assignee when creating issues for this project.
    public var assigneeType: AssigneeType?
    /// An integer value for the project's avatar.
    public var avatarID: Int64?
    /// The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
    public var issueSecurityScheme: Int64?
    /// The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
    public var permissionScheme: Int64?
    /// The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
    public var notificationScheme: Int64?
    /// The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
    public var categoryID: Int64?
    /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
    public var projectTypeKey: ProjectTypeKey?
    /// A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
    public var projectTemplateKey: ProjectTemplateKey?
    /// The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
    public var workflowScheme: Int64?
    /// The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
    public var issueTypeScreenScheme: Int64?
    /// The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
    public var issueTypeScheme: Int64?
    /// The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
    public var fieldConfigurationScheme: Int64?

    /// The default assignee when creating issues for this project.
    public enum AssigneeType: String, Codable, CaseIterable {
        case projectLead = "PROJECT_LEAD"
        case unassigned = "UNASSIGNED"
    }

    /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
    public enum ProjectTypeKey: String, Codable, CaseIterable {
        case software
        case serviceDesk = "service_desk"
        case business
    }

    /// A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
    public enum ProjectTemplateKey: String, Codable, CaseIterable {
        case comPyxisGreenhopperJiraGhSimplifiedAgilityKanban = "com.pyxis.greenhopper.jira:gh-simplified-agility-kanban"
        case comPyxisGreenhopperJiraGhSimplifiedAgilityScrum = "com.pyxis.greenhopper.jira:gh-simplified-agility-scrum"
        case comPyxisGreenhopperJiraGhSimplifiedBasic = "com.pyxis.greenhopper.jira:gh-simplified-basic"
        case comPyxisGreenhopperJiraGhSimplifiedKanbanClassic = "com.pyxis.greenhopper.jira:gh-simplified-kanban-classic"
        case comPyxisGreenhopperJiraGhSimplifiedScrumClassic = "com.pyxis.greenhopper.jira:gh-simplified-scrum-classic"
        case comAtlassianServicedeskSimplifiedItServiceManagement = "com.atlassian.servicedesk:simplified-it-service-management"
        case comAtlassianServicedeskSimplifiedGeneralServiceDesk = "com.atlassian.servicedesk:simplified-general-service-desk"
        case comAtlassianServicedeskSimplifiedGeneralServiceDeskIt = "com.atlassian.servicedesk:simplified-general-service-desk-it"
        case comAtlassianServicedeskSimplifiedGeneralServiceDeskBusiness = "com.atlassian.servicedesk:simplified-general-service-desk-business"
        case comAtlassianServicedeskSimplifiedInternalServiceDesk = "com.atlassian.servicedesk:simplified-internal-service-desk"
        case comAtlassianServicedeskSimplifiedExternalServiceDesk = "com.atlassian.servicedesk:simplified-external-service-desk"
        case comAtlassianServicedeskSimplifiedHrServiceDesk = "com.atlassian.servicedesk:simplified-hr-service-desk"
        case comAtlassianServicedeskSimplifiedFacilitiesServiceDesk = "com.atlassian.servicedesk:simplified-facilities-service-desk"
        case comAtlassianServicedeskSimplifiedLegalServiceDesk = "com.atlassian.servicedesk:simplified-legal-service-desk"
        case comAtlassianJiraCoreProjectTemplatesJiraCoreSimplifiedContentManagement = "com.atlassian.jira-core-project-templates:jira-core-simplified-content-management"
        case comAtlassianJiraCoreProjectTemplatesJiraCoreSimplifiedDocumentApproval = "com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval"
        case comAtlassianJiraCoreProjectTemplatesJiraCoreSimplifiedLeadTracking = "com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking"
        case comAtlassianJiraCoreProjectTemplatesJiraCoreSimplifiedProcessControl = "com.atlassian.jira-core-project-templates:jira-core-simplified-process-control"
        case comAtlassianJiraCoreProjectTemplatesJiraCoreSimplifiedProcurement = "com.atlassian.jira-core-project-templates:jira-core-simplified-procurement"
        case comAtlassianJiraCoreProjectTemplatesJiraCoreSimplifiedProjectManagement = "com.atlassian.jira-core-project-templates:jira-core-simplified-project-management"
        case comAtlassianJiraCoreProjectTemplatesJiraCoreSimplifiedRecruitment = "com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment"
        case comAtlassianJiraCoreProjectTemplatesJiraCoreSimplifiedTask = "com.atlassian.jira-core-project-templates:jira-core-simplified-task-"
    }

    public init(key: String, name: String, description: String? = nil, lead: String? = nil, leadAccountID: String? = nil, url: String? = nil, assigneeType: AssigneeType? = nil, avatarID: Int64? = nil, issueSecurityScheme: Int64? = nil, permissionScheme: Int64? = nil, notificationScheme: Int64? = nil, categoryID: Int64? = nil, projectTypeKey: ProjectTypeKey? = nil, projectTemplateKey: ProjectTemplateKey? = nil, workflowScheme: Int64? = nil, issueTypeScreenScheme: Int64? = nil, issueTypeScheme: Int64? = nil, fieldConfigurationScheme: Int64? = nil) {
        self.key = key
        self.name = name
        self.description = description
        self.lead = lead
        self.leadAccountID = leadAccountID
        self.url = url
        self.assigneeType = assigneeType
        self.avatarID = avatarID
        self.issueSecurityScheme = issueSecurityScheme
        self.permissionScheme = permissionScheme
        self.notificationScheme = notificationScheme
        self.categoryID = categoryID
        self.projectTypeKey = projectTypeKey
        self.projectTemplateKey = projectTemplateKey
        self.workflowScheme = workflowScheme
        self.issueTypeScreenScheme = issueTypeScreenScheme
        self.issueTypeScheme = issueTypeScheme
        self.fieldConfigurationScheme = fieldConfigurationScheme
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.key = try values.decode(String.self, forKey: "key")
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.lead = try values.decodeIfPresent(String.self, forKey: "lead")
        self.leadAccountID = try values.decodeIfPresent(String.self, forKey: "leadAccountId")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
        self.assigneeType = try values.decodeIfPresent(AssigneeType.self, forKey: "assigneeType")
        self.avatarID = try values.decodeIfPresent(Int64.self, forKey: "avatarId")
        self.issueSecurityScheme = try values.decodeIfPresent(Int64.self, forKey: "issueSecurityScheme")
        self.permissionScheme = try values.decodeIfPresent(Int64.self, forKey: "permissionScheme")
        self.notificationScheme = try values.decodeIfPresent(Int64.self, forKey: "notificationScheme")
        self.categoryID = try values.decodeIfPresent(Int64.self, forKey: "categoryId")
        self.projectTypeKey = try values.decodeIfPresent(ProjectTypeKey.self, forKey: "projectTypeKey")
        self.projectTemplateKey = try values.decodeIfPresent(ProjectTemplateKey.self, forKey: "projectTemplateKey")
        self.workflowScheme = try values.decodeIfPresent(Int64.self, forKey: "workflowScheme")
        self.issueTypeScreenScheme = try values.decodeIfPresent(Int64.self, forKey: "issueTypeScreenScheme")
        self.issueTypeScheme = try values.decodeIfPresent(Int64.self, forKey: "issueTypeScheme")
        self.fieldConfigurationScheme = try values.decodeIfPresent(Int64.self, forKey: "fieldConfigurationScheme")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(key, forKey: "key")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(lead, forKey: "lead")
        try values.encodeIfPresent(leadAccountID, forKey: "leadAccountId")
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(assigneeType, forKey: "assigneeType")
        try values.encodeIfPresent(avatarID, forKey: "avatarId")
        try values.encodeIfPresent(issueSecurityScheme, forKey: "issueSecurityScheme")
        try values.encodeIfPresent(permissionScheme, forKey: "permissionScheme")
        try values.encodeIfPresent(notificationScheme, forKey: "notificationScheme")
        try values.encodeIfPresent(categoryID, forKey: "categoryId")
        try values.encodeIfPresent(projectTypeKey, forKey: "projectTypeKey")
        try values.encodeIfPresent(projectTemplateKey, forKey: "projectTemplateKey")
        try values.encodeIfPresent(workflowScheme, forKey: "workflowScheme")
        try values.encodeIfPresent(issueTypeScreenScheme, forKey: "issueTypeScreenScheme")
        try values.encodeIfPresent(issueTypeScheme, forKey: "issueTypeScheme")
        try values.encodeIfPresent(fieldConfigurationScheme, forKey: "fieldConfigurationScheme")
    }
}
