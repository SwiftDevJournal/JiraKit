// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A workflow transition condition.
public struct CreateWorkflowCondition: Codable {
    /// The compound condition operator.
    public var `operator`: Operator?
    /// The list of workflow conditions.
    public var conditions: [CreateWorkflowCondition]?
    /// The type of the transition rule.
    public var type: String?
    /// EXPERIMENTAL. The configuration of the transition rule.
    public var configuration: [String: AnyJSON]?

    /// The compound condition operator.
    public enum Operator: String, Codable, CaseIterable {
        case and = "AND"
        case or = "OR"
    }

    public init(`operator`: Operator? = nil, conditions: [CreateWorkflowCondition]? = nil, type: String? = nil, configuration: [String: AnyJSON]? = nil) {
        self.operator = `operator`
        self.conditions = conditions
        self.type = type
        self.configuration = configuration
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.operator = try values.decodeIfPresent(Operator.self, forKey: "operator")
        self.conditions = try values.decodeIfPresent([CreateWorkflowCondition].self, forKey: "conditions")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.configuration = try values.decodeIfPresent([String: AnyJSON].self, forKey: "configuration")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(`operator`, forKey: "operator")
        try values.encodeIfPresent(conditions, forKey: "conditions")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(configuration, forKey: "configuration")
    }
}
