// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The details of a workflow.
public struct CreateWorkflowDetails: Codable {
    /// The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
    public var name: String
    /// The description of the workflow. The maximum length is 1000 characters.
    public var description: String?
    /// The transitions of the workflow. For the request to be valid, these transitions must:
    /// 
    ///  *  include one *initial* transition.
    ///  *  not use the same name for a *global* and *directed* transition.
    ///  *  have a unique name for each *global* transition.
    ///  *  have a unique 'to' status for each *global* transition.
    ///  *  have unique names for each transition from a status.
    ///  *  not have a 'from' status on *initial* and *global* transitions.
    ///  *  have a 'from' status on *directed* transitions.
    /// 
    /// All the transition statuses must be included in `statuses`.
    public var transitions: [CreateWorkflowTransitionDetails]
    /// The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
    public var statuses: [CreateWorkflowStatusDetails]

    public init(name: String, description: String? = nil, transitions: [CreateWorkflowTransitionDetails], statuses: [CreateWorkflowStatusDetails]) {
        self.name = name
        self.description = description
        self.transitions = transitions
        self.statuses = statuses
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.transitions = try values.decode([CreateWorkflowTransitionDetails].self, forKey: "transitions")
        self.statuses = try values.decode([CreateWorkflowStatusDetails].self, forKey: "statuses")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(transitions, forKey: "transitions")
        try values.encode(statuses, forKey: "statuses")
    }
}
