// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The details of a workflow transition.
public struct CreateWorkflowTransitionDetails: Codable {
    /// The name of the transition. The maximum length is 60 characters.
    public var name: String
    /// The description of the transition. The maximum length is 1000 characters.
    public var description: String?
    /// The statuses the transition can start from.
    public var from: [String]?
    /// The status the transition goes to.
    public var to: String
    /// The type of the transition.
    public var type: `Type`
    /// The rules of the transition.
    public var rules: CreateWorkflowTransitionRulesDetails?
    /// The screen of the transition.
    public var screen: CreateWorkflowTransitionScreenDetails?
    /// The properties of the transition.
    public var properties: [String: String]?

    /// The type of the transition.
    public enum `Type`: String, Codable, CaseIterable {
        case global
        case initial
        case directed
    }

    public init(name: String, description: String? = nil, from: [String]? = nil, to: String, type: `Type`, rules: CreateWorkflowTransitionRulesDetails? = nil, screen: CreateWorkflowTransitionScreenDetails? = nil, properties: [String: String]? = nil) {
        self.name = name
        self.description = description
        self.from = from
        self.to = to
        self.type = type
        self.rules = rules
        self.screen = screen
        self.properties = properties
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.from = try values.decodeIfPresent([String].self, forKey: "from")
        self.to = try values.decode(String.self, forKey: "to")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.rules = try values.decodeIfPresent(CreateWorkflowTransitionRulesDetails.self, forKey: "rules")
        self.screen = try values.decodeIfPresent(CreateWorkflowTransitionScreenDetails.self, forKey: "screen")
        self.properties = try values.decodeIfPresent([String: String].self, forKey: "properties")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(from, forKey: "from")
        try values.encode(to, forKey: "to")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(rules, forKey: "rules")
        try values.encodeIfPresent(screen, forKey: "screen")
        try values.encodeIfPresent(properties, forKey: "properties")
    }
}
