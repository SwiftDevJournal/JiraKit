// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public enum CustomContextVariable: Codable {
    case userContextVariable(UserContextVariable)
    case issueContextVariable(IssueContextVariable)
    case jsonContextVariable(JSONContextVariable)

    public init(from decoder: Decoder) throws {

        struct Discriminator: Decodable {
            let type: String
        }

        let container = try decoder.singleValueContainer()
        let discriminatorValue = try container.decode(Discriminator.self).type

        switch discriminatorValue {
        case "user": self = .userContextVariable(try container.decode(UserContextVariable.self))
        case "issue": self = .issueContextVariable(try container.decode(IssueContextVariable.self))
        case "json": self = .jsonContextVariable(try container.decode(JSONContextVariable.self))

        default:
            throw DecodingError.dataCorruptedError(
                in: container,
                debugDescription: "Discriminator value '\(discriminatorValue)' does not match any expected values (user, issue, json)."
            )
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .userContextVariable(let value): try container.encode(value)
        case .issueContextVariable(let value): try container.encode(value)
        case .jsonContextVariable(let value): try container.encode(value)
        }
    }
}
