// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public enum CustomFieldContextDefaultValue: Codable {
    case customFieldContextDefaultValueCascadingOption(CustomFieldContextDefaultValueCascadingOption)
    case customFieldContextDefaultValueMultipleOption(CustomFieldContextDefaultValueMultipleOption)
    case customFieldContextDefaultValueSingleOption(CustomFieldContextDefaultValueSingleOption)
    case customFieldContextSingleUserPickerDefaults(CustomFieldContextSingleUserPickerDefaults)
    case customFieldContextDefaultValueMultiUserPicker(CustomFieldContextDefaultValueMultiUserPicker)
    case customFieldContextDefaultValueSingleGroupPicker(CustomFieldContextDefaultValueSingleGroupPicker)
    case customFieldContextDefaultValueMultipleGroupPicker(CustomFieldContextDefaultValueMultipleGroupPicker)
    case customFieldContextDefaultValueDate(CustomFieldContextDefaultValueDate)
    case customFieldContextDefaultValueDateTime(CustomFieldContextDefaultValueDateTime)
    case customFieldContextDefaultValueURL(CustomFieldContextDefaultValueURL)
    case customFieldContextDefaultValueProject(CustomFieldContextDefaultValueProject)
    case customFieldContextDefaultValueFloat(CustomFieldContextDefaultValueFloat)
    case customFieldContextDefaultValueLabels(CustomFieldContextDefaultValueLabels)
    case customFieldContextDefaultValueTextField(CustomFieldContextDefaultValueTextField)
    case customFieldContextDefaultValueTextArea(CustomFieldContextDefaultValueTextArea)
    case customFieldContextDefaultValueReadOnly(CustomFieldContextDefaultValueReadOnly)
    case customFieldContextDefaultValueSingleVersionPicker(CustomFieldContextDefaultValueSingleVersionPicker)
    case customFieldContextDefaultValueMultipleVersionPicker(CustomFieldContextDefaultValueMultipleVersionPicker)
    case customFieldContextDefaultValueForgeStringField(CustomFieldContextDefaultValueForgeStringField)
    case customFieldContextDefaultValueForgeMultiStringField(CustomFieldContextDefaultValueForgeMultiStringField)
    case customFieldContextDefaultValueForgeObjectField(CustomFieldContextDefaultValueForgeObjectField)
    case customFieldContextDefaultValueForgeDateTimeField(CustomFieldContextDefaultValueForgeDateTimeField)
    case customFieldContextDefaultValueForgeGroupField(CustomFieldContextDefaultValueForgeGroupField)
    case customFieldContextDefaultValueForgeMultiGroupField(CustomFieldContextDefaultValueForgeMultiGroupField)
    case customFieldContextDefaultValueForgeNumberField(CustomFieldContextDefaultValueForgeNumberField)
    case customFieldContextDefaultValueForgeUserField(CustomFieldContextDefaultValueForgeUserField)
    case customFieldContextDefaultValueForgeMultiUserField(CustomFieldContextDefaultValueForgeMultiUserField)

    public init(from decoder: Decoder) throws {

        struct Discriminator: Decodable {
            let type: String
        }

        let container = try decoder.singleValueContainer()

        switch (try container.decode(Discriminator.self)).type {
        case "option.cascading": self = .customFieldContextDefaultValueCascadingOption(try container.decode(CustomFieldContextDefaultValueCascadingOption.self))
        case "option.multiple": self = .customFieldContextDefaultValueMultipleOption(try container.decode(CustomFieldContextDefaultValueMultipleOption.self))
        case "option.single": self = .customFieldContextDefaultValueSingleOption(try container.decode(CustomFieldContextDefaultValueSingleOption.self))
        case "single.user.select": self = .customFieldContextSingleUserPickerDefaults(try container.decode(CustomFieldContextSingleUserPickerDefaults.self))
        case "multi.user.select": self = .customFieldContextDefaultValueMultiUserPicker(try container.decode(CustomFieldContextDefaultValueMultiUserPicker.self))
        case "grouppicker.single": self = .customFieldContextDefaultValueSingleGroupPicker(try container.decode(CustomFieldContextDefaultValueSingleGroupPicker.self))
        case "grouppicker.multiple": self = .customFieldContextDefaultValueMultipleGroupPicker(try container.decode(CustomFieldContextDefaultValueMultipleGroupPicker.self))
        case "datepicker": self = .customFieldContextDefaultValueDate(try container.decode(CustomFieldContextDefaultValueDate.self))
        case "datetimepicker": self = .customFieldContextDefaultValueDateTime(try container.decode(CustomFieldContextDefaultValueDateTime.self))
        case "url": self = .customFieldContextDefaultValueURL(try container.decode(CustomFieldContextDefaultValueURL.self))
        case "project": self = .customFieldContextDefaultValueProject(try container.decode(CustomFieldContextDefaultValueProject.self))
        case "float": self = .customFieldContextDefaultValueFloat(try container.decode(CustomFieldContextDefaultValueFloat.self))
        case "labels": self = .customFieldContextDefaultValueLabels(try container.decode(CustomFieldContextDefaultValueLabels.self))
        case "textfield": self = .customFieldContextDefaultValueTextField(try container.decode(CustomFieldContextDefaultValueTextField.self))
        case "textarea": self = .customFieldContextDefaultValueTextArea(try container.decode(CustomFieldContextDefaultValueTextArea.self))
        case "readonly": self = .customFieldContextDefaultValueReadOnly(try container.decode(CustomFieldContextDefaultValueReadOnly.self))
        case "version.single": self = .customFieldContextDefaultValueSingleVersionPicker(try container.decode(CustomFieldContextDefaultValueSingleVersionPicker.self))
        case "version.multiple": self = .customFieldContextDefaultValueMultipleVersionPicker(try container.decode(CustomFieldContextDefaultValueMultipleVersionPicker.self))
        case "forge.string": self = .customFieldContextDefaultValueForgeStringField(try container.decode(CustomFieldContextDefaultValueForgeStringField.self))
        case "forge.string.list": self = .customFieldContextDefaultValueForgeMultiStringField(try container.decode(CustomFieldContextDefaultValueForgeMultiStringField.self))
        case "forge.object": self = .customFieldContextDefaultValueForgeObjectField(try container.decode(CustomFieldContextDefaultValueForgeObjectField.self))
        case "forge.datetime": self = .customFieldContextDefaultValueForgeDateTimeField(try container.decode(CustomFieldContextDefaultValueForgeDateTimeField.self))
        case "forge.group": self = .customFieldContextDefaultValueForgeGroupField(try container.decode(CustomFieldContextDefaultValueForgeGroupField.self))
        case "forge.group.list": self = .customFieldContextDefaultValueForgeMultiGroupField(try container.decode(CustomFieldContextDefaultValueForgeMultiGroupField.self))
        case "forge.number": self = .customFieldContextDefaultValueForgeNumberField(try container.decode(CustomFieldContextDefaultValueForgeNumberField.self))
        case "forge.user": self = .customFieldContextDefaultValueForgeUserField(try container.decode(CustomFieldContextDefaultValueForgeUserField.self))
        case "forge.user.list": self = .customFieldContextDefaultValueForgeMultiUserField(try container.decode(CustomFieldContextDefaultValueForgeMultiUserField.self))

        default:
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to initialize `oneOf`")
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .customFieldContextDefaultValueCascadingOption(let value): try container.encode(value)
        case .customFieldContextDefaultValueMultipleOption(let value): try container.encode(value)
        case .customFieldContextDefaultValueSingleOption(let value): try container.encode(value)
        case .customFieldContextSingleUserPickerDefaults(let value): try container.encode(value)
        case .customFieldContextDefaultValueMultiUserPicker(let value): try container.encode(value)
        case .customFieldContextDefaultValueSingleGroupPicker(let value): try container.encode(value)
        case .customFieldContextDefaultValueMultipleGroupPicker(let value): try container.encode(value)
        case .customFieldContextDefaultValueDate(let value): try container.encode(value)
        case .customFieldContextDefaultValueDateTime(let value): try container.encode(value)
        case .customFieldContextDefaultValueURL(let value): try container.encode(value)
        case .customFieldContextDefaultValueProject(let value): try container.encode(value)
        case .customFieldContextDefaultValueFloat(let value): try container.encode(value)
        case .customFieldContextDefaultValueLabels(let value): try container.encode(value)
        case .customFieldContextDefaultValueTextField(let value): try container.encode(value)
        case .customFieldContextDefaultValueTextArea(let value): try container.encode(value)
        case .customFieldContextDefaultValueReadOnly(let value): try container.encode(value)
        case .customFieldContextDefaultValueSingleVersionPicker(let value): try container.encode(value)
        case .customFieldContextDefaultValueMultipleVersionPicker(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeStringField(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeMultiStringField(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeObjectField(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeDateTimeField(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeGroupField(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeMultiGroupField(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeNumberField(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeUserField(let value): try container.encode(value)
        case .customFieldContextDefaultValueForgeMultiUserField(let value): try container.encode(value)
        }
    }
}
