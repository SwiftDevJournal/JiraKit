// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A list of issue IDs and the value to update a custom field to.
public struct CustomFieldValueUpdate: Codable {
    /// The list of issue IDs.
    public var issueIDs: [Int64]
    /// The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
    /// 
    ///  *  `string` the value must be a string.
    ///  *  `number` the value must be a number.
    ///  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
    ///  *  `user` the value must be an object that contains the `accountId` field.
    ///  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
    /// 
    /// A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
    public var value: AnyJSON

    public init(issueIDs: [Int64], value: AnyJSON) {
        self.issueIDs = issueIDs
        self.value = value
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.issueIDs = try values.decode([Int64].self, forKey: "issueIds")
        self.value = try values.decode(AnyJSON.self, forKey: "value")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(issueIDs, forKey: "issueIds")
        try values.encode(value, forKey: "value")
    }
}
