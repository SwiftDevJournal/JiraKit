// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of a dashboard.
public struct Dashboard: Codable {
    public var description: String?
    /// The ID of the dashboard.
    public var id: String?
    /// Whether the dashboard is selected as a favorite by the user.
    public var isFavourite: Bool?
    /// The name of the dashboard.
    public var name: String?
    /// The owner of the dashboard.
    public var owner: UserBean?
    /// The number of users who have this dashboard as a favorite.
    public var popularity: Int?
    /// The rank of this dashboard.
    public var rank: Int?
    /// The URL of these dashboard details.
    public var this: URL?
    /// The details of any view share permissions for the dashboard.
    public var sharePermissions: [SharePermission]?
    /// The details of any edit share permissions for the dashboard.
    public var editPermissions: [SharePermission]?
    /// The automatic refresh interval for the dashboard in milliseconds.
    public var automaticRefreshMs: Int?
    /// The URL of the dashboard.
    public var view: String?
    /// Whether the current user has permission to edit the dashboard.
    public var isWritable: Bool?
    /// Whether the current dashboard is system dashboard.
    public var isSystemDashboard: Bool?

    public init(description: String? = nil, id: String? = nil, isFavourite: Bool? = nil, name: String? = nil, owner: UserBean? = nil, popularity: Int? = nil, rank: Int? = nil, this: URL? = nil, sharePermissions: [SharePermission]? = nil, editPermissions: [SharePermission]? = nil, automaticRefreshMs: Int? = nil, view: String? = nil, isWritable: Bool? = nil, isSystemDashboard: Bool? = nil) {
        self.description = description
        self.id = id
        self.isFavourite = isFavourite
        self.name = name
        self.owner = owner
        self.popularity = popularity
        self.rank = rank
        self.this = this
        self.sharePermissions = sharePermissions
        self.editPermissions = editPermissions
        self.automaticRefreshMs = automaticRefreshMs
        self.view = view
        self.isWritable = isWritable
        self.isSystemDashboard = isSystemDashboard
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.isFavourite = try values.decodeIfPresent(Bool.self, forKey: "isFavourite")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.owner = try values.decodeIfPresent(UserBean.self, forKey: "owner")
        self.popularity = try values.decodeIfPresent(Int.self, forKey: "popularity")
        self.rank = try values.decodeIfPresent(Int.self, forKey: "rank")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.sharePermissions = try values.decodeIfPresent([SharePermission].self, forKey: "sharePermissions")
        self.editPermissions = try values.decodeIfPresent([SharePermission].self, forKey: "editPermissions")
        self.automaticRefreshMs = try values.decodeIfPresent(Int.self, forKey: "automaticRefreshMs")
        self.view = try values.decodeIfPresent(String.self, forKey: "view")
        self.isWritable = try values.decodeIfPresent(Bool.self, forKey: "isWritable")
        self.isSystemDashboard = try values.decodeIfPresent(Bool.self, forKey: "systemDashboard")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(isFavourite, forKey: "isFavourite")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(owner, forKey: "owner")
        try values.encodeIfPresent(popularity, forKey: "popularity")
        try values.encodeIfPresent(rank, forKey: "rank")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(sharePermissions, forKey: "sharePermissions")
        try values.encodeIfPresent(editPermissions, forKey: "editPermissions")
        try values.encodeIfPresent(automaticRefreshMs, forKey: "automaticRefreshMs")
        try values.encodeIfPresent(view, forKey: "view")
        try values.encodeIfPresent(isWritable, forKey: "isWritable")
        try values.encodeIfPresent(isSystemDashboard, forKey: "systemDashboard")
    }
}
