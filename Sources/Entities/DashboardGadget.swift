// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of a gadget.
public struct DashboardGadget: Codable {
    /// The ID of the gadget instance.
    public var id: Int
    /// The module key of the gadget type.
    public var moduleKey: String?
    /// The URI of the gadget type.
    public var uri: String?
    /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
    public var color: Color
    /// The position of the gadget.
    public var position: DashboardGadgetPosition
    /// The title of the gadget.
    public var title: String

    /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
    public enum Color: String, Codable, CaseIterable {
        case blue
        case red
        case yellow
        case green
        case cyan
        case purple
        case gray
        case white
    }

    public init(id: Int, moduleKey: String? = nil, uri: String? = nil, color: Color, position: DashboardGadgetPosition, title: String) {
        self.id = id
        self.moduleKey = moduleKey
        self.uri = uri
        self.color = color
        self.position = position
        self.title = title
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.moduleKey = try values.decodeIfPresent(String.self, forKey: "moduleKey")
        self.uri = try values.decodeIfPresent(String.self, forKey: "uri")
        self.color = try values.decode(Color.self, forKey: "color")
        self.position = try values.decode(DashboardGadgetPosition.self, forKey: "position")
        self.title = try values.decode(String.self, forKey: "title")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(moduleKey, forKey: "moduleKey")
        try values.encodeIfPresent(uri, forKey: "uri")
        try values.encode(color, forKey: "color")
        try values.encode(position, forKey: "position")
        try values.encode(title, forKey: "title")
    }
}
