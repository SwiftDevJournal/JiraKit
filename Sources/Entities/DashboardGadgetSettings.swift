// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of the settings for a dashboard gadget.
public struct DashboardGadgetSettings: Codable {
    /// The module key of the gadget type. Can't be provided with `uri`.
    public var moduleKey: String?
    /// The URI of the gadget type. Can't be provided with `moduleKey`.
    public var uri: String?
    /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
    public var color: String?
    /// The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.
    public var position: DashboardGadgetPosition?
    /// The title of the gadget.
    public var title: String?
    /// Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
    public var isIgnoreUriAndModuleKeyValidation: Bool?

    public init(moduleKey: String? = nil, uri: String? = nil, color: String? = nil, position: DashboardGadgetPosition? = nil, title: String? = nil, isIgnoreUriAndModuleKeyValidation: Bool? = nil) {
        self.moduleKey = moduleKey
        self.uri = uri
        self.color = color
        self.position = position
        self.title = title
        self.isIgnoreUriAndModuleKeyValidation = isIgnoreUriAndModuleKeyValidation
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.moduleKey = try values.decodeIfPresent(String.self, forKey: "moduleKey")
        self.uri = try values.decodeIfPresent(String.self, forKey: "uri")
        self.color = try values.decodeIfPresent(String.self, forKey: "color")
        self.position = try values.decodeIfPresent(DashboardGadgetPosition.self, forKey: "position")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.isIgnoreUriAndModuleKeyValidation = try values.decodeIfPresent(Bool.self, forKey: "ignoreUriAndModuleKeyValidation")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(moduleKey, forKey: "moduleKey")
        try values.encodeIfPresent(uri, forKey: "uri")
        try values.encodeIfPresent(color, forKey: "color")
        try values.encodeIfPresent(position, forKey: "position")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(isIgnoreUriAndModuleKeyValidation, forKey: "ignoreUriAndModuleKeyValidation")
    }
}
