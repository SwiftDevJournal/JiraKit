// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct DeleteAndReplaceVersionBean: Codable {
    /// The ID of the version to update `fixVersion` to when the field contains the deleted version.
    public var moveFixIssuesTo: Int?
    /// The ID of the version to update `affectedVersion` to when the field contains the deleted version.
    public var moveAffectedIssuesTo: Int?
    /// An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.
    public var customFieldReplacementList: [CustomFieldReplacement]?

    public init(moveFixIssuesTo: Int? = nil, moveAffectedIssuesTo: Int? = nil, customFieldReplacementList: [CustomFieldReplacement]? = nil) {
        self.moveFixIssuesTo = moveFixIssuesTo
        self.moveAffectedIssuesTo = moveAffectedIssuesTo
        self.customFieldReplacementList = customFieldReplacementList
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.moveFixIssuesTo = try values.decodeIfPresent(Int.self, forKey: "moveFixIssuesTo")
        self.moveAffectedIssuesTo = try values.decodeIfPresent(Int.self, forKey: "moveAffectedIssuesTo")
        self.customFieldReplacementList = try values.decodeIfPresent([CustomFieldReplacement].self, forKey: "customFieldReplacementList")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(moveFixIssuesTo, forKey: "moveFixIssuesTo")
        try values.encodeIfPresent(moveAffectedIssuesTo, forKey: "moveAffectedIssuesTo")
        try values.encodeIfPresent(customFieldReplacementList, forKey: "customFieldReplacementList")
    }
}
