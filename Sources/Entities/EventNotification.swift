// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a notification associated with an event.
public struct EventNotification: Codable {
    /// Expand options that include additional event notification details in the response.
    public var expand: String?
    /// The ID of the notification.
    public var id: Int?
    /// Identifies the recipients of the notification.
    public var notificationType: NotificationType?
    /// As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:
    /// 
    ///  *  `User` The `parameter` is the user account ID.
    ///  *  `Group` The `parameter` is the group name.
    ///  *  `ProjectRole` The `parameter` is the project role ID.
    ///  *  `UserCustomField` The `parameter` is the ID of the custom field.
    ///  *  `GroupCustomField` The `parameter` is the ID of the custom field.
    public var parameter: String?
    /// The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:
    /// 
    ///  *  `User`, `recipient` is the user account ID.
    ///  *  `Group`, `recipient` is the group ID.
    ///  *  `ProjectRole`, `recipient` is the project role ID.
    ///  *  `UserCustomField`, `recipient` is the ID of the custom field.
    ///  *  `GroupCustomField`, `recipient` is the ID of the custom field.
    public var recipient: String?
    /// The specified group.
    public var group: GroupName?
    /// The custom user or group field.
    public var field: FieldDetails?
    /// The email address.
    public var emailAddress: String?
    /// The specified project role.
    public var projectRole: ProjectRole?
    /// The specified user.
    public var user: UserDetails?

    /// Identifies the recipients of the notification.
    public enum NotificationType: String, Codable, CaseIterable {
        case currentAssignee = "CurrentAssignee"
        case reporter = "Reporter"
        case currentUser = "CurrentUser"
        case projectLead = "ProjectLead"
        case componentLead = "ComponentLead"
        case user = "User"
        case group = "Group"
        case projectRole = "ProjectRole"
        case emailAddress = "EmailAddress"
        case allWatchers = "AllWatchers"
        case userCustomField = "UserCustomField"
        case groupCustomField = "GroupCustomField"
    }

    public init(expand: String? = nil, id: Int? = nil, notificationType: NotificationType? = nil, parameter: String? = nil, recipient: String? = nil, group: GroupName? = nil, field: FieldDetails? = nil, emailAddress: String? = nil, projectRole: ProjectRole? = nil, user: UserDetails? = nil) {
        self.expand = expand
        self.id = id
        self.notificationType = notificationType
        self.parameter = parameter
        self.recipient = recipient
        self.group = group
        self.field = field
        self.emailAddress = emailAddress
        self.projectRole = projectRole
        self.user = user
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.id = try values.decodeIfPresent(Int.self, forKey: "id")
        self.notificationType = try values.decodeIfPresent(NotificationType.self, forKey: "notificationType")
        self.parameter = try values.decodeIfPresent(String.self, forKey: "parameter")
        self.recipient = try values.decodeIfPresent(String.self, forKey: "recipient")
        self.group = try values.decodeIfPresent(GroupName.self, forKey: "group")
        self.field = try values.decodeIfPresent(FieldDetails.self, forKey: "field")
        self.emailAddress = try values.decodeIfPresent(String.self, forKey: "emailAddress")
        self.projectRole = try values.decodeIfPresent(ProjectRole.self, forKey: "projectRole")
        self.user = try values.decodeIfPresent(UserDetails.self, forKey: "user")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(notificationType, forKey: "notificationType")
        try values.encodeIfPresent(parameter, forKey: "parameter")
        try values.encodeIfPresent(recipient, forKey: "recipient")
        try values.encodeIfPresent(group, forKey: "group")
        try values.encodeIfPresent(field, forKey: "field")
        try values.encodeIfPresent(emailAddress, forKey: "emailAddress")
        try values.encodeIfPresent(projectRole, forKey: "projectRole")
        try values.encodeIfPresent(user, forKey: "user")
    }
}
