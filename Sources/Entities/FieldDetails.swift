// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a field.
public struct FieldDetails: Codable {
    /// The ID of the field.
    public var id: String?
    /// The key of the field.
    public var key: String?
    /// The name of the field.
    public var name: String?
    /// Whether the field is a custom field.
    public var isCustom: Bool?
    /// Whether the content of the field can be used to order lists.
    public var isOrderable: Bool?
    /// Whether the field can be used as a column on the issue navigator.
    public var isNavigable: Bool?
    /// Whether the content of the field can be searched.
    public var isSearchable: Bool?
    /// The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
    public var clauseNames: [String]?
    /// The scope of the field.
    public var scope: Scope?
    /// The data schema for the field.
    public var schema: JSONTypeBean?

    public init(id: String? = nil, key: String? = nil, name: String? = nil, isCustom: Bool? = nil, isOrderable: Bool? = nil, isNavigable: Bool? = nil, isSearchable: Bool? = nil, clauseNames: [String]? = nil, scope: Scope? = nil, schema: JSONTypeBean? = nil) {
        self.id = id
        self.key = key
        self.name = name
        self.isCustom = isCustom
        self.isOrderable = isOrderable
        self.isNavigable = isNavigable
        self.isSearchable = isSearchable
        self.clauseNames = clauseNames
        self.scope = scope
        self.schema = schema
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.isCustom = try values.decodeIfPresent(Bool.self, forKey: "custom")
        self.isOrderable = try values.decodeIfPresent(Bool.self, forKey: "orderable")
        self.isNavigable = try values.decodeIfPresent(Bool.self, forKey: "navigable")
        self.isSearchable = try values.decodeIfPresent(Bool.self, forKey: "searchable")
        self.clauseNames = try values.decodeIfPresent([String].self, forKey: "clauseNames")
        self.scope = try values.decodeIfPresent(Scope.self, forKey: "scope")
        self.schema = try values.decodeIfPresent(JSONTypeBean.self, forKey: "schema")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(isCustom, forKey: "custom")
        try values.encodeIfPresent(isOrderable, forKey: "orderable")
        try values.encodeIfPresent(isNavigable, forKey: "navigable")
        try values.encodeIfPresent(isSearchable, forKey: "searchable")
        try values.encodeIfPresent(clauseNames, forKey: "clauseNames")
        try values.encodeIfPresent(scope, forKey: "scope")
        try values.encodeIfPresent(schema, forKey: "schema")
    }
}
