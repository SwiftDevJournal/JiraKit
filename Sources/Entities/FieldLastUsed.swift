// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Information about the most recent use of a field.
public struct FieldLastUsed: Codable {
    /// Last used value type:
    /// 
    ///  *  *TRACKED*: field is tracked and a last used date is available.
    ///  *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
    ///  *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
    public var type: `Type`?
    /// The date when the value of the field last changed.
    public var value: Date?

    /// Last used value type:
    /// 
    ///  *  *TRACKED*: field is tracked and a last used date is available.
    ///  *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
    ///  *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
    public enum `Type`: String, Codable, CaseIterable {
        case tracked = "TRACKED"
        case notTracked = "NOT_TRACKED"
        case noInformation = "NO_INFORMATION"
    }

    public init(type: `Type`? = nil, value: Date? = nil) {
        self.type = type
        self.value = value
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
        self.value = try values.decodeIfPresent(Date.self, forKey: "value")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(value, forKey: "value")
    }
}
