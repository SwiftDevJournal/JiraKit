// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The metadata describing an issue field.
public struct FieldMetadata: Codable {
    /// Whether the field is required.
    public var isRequired: Bool
    /// The data type of the field.
    public var schema: JSONTypeBean
    /// The name of the field.
    public var name: String
    /// The key of the field.
    public var key: String
    /// The URL that can be used to automatically complete the field.
    public var autoCompleteURL: String?
    /// Whether the field has a default value.
    public var hasDefaultValue: Bool?
    /// The list of operations that can be performed on the field.
    public var operations: [String]
    /// The list of values allowed in the field.
    public var allowedValues: [AnyJSON]?
    /// The default value of the field.
    public var defaultValue: AnyJSON?
    /// The configuration properties.
    public var configuration: [String: AnyJSON]?

    public init(isRequired: Bool, schema: JSONTypeBean, name: String, key: String, autoCompleteURL: String? = nil, hasDefaultValue: Bool? = nil, operations: [String], allowedValues: [AnyJSON]? = nil, defaultValue: AnyJSON? = nil, configuration: [String: AnyJSON]? = nil) {
        self.isRequired = isRequired
        self.schema = schema
        self.name = name
        self.key = key
        self.autoCompleteURL = autoCompleteURL
        self.hasDefaultValue = hasDefaultValue
        self.operations = operations
        self.allowedValues = allowedValues
        self.defaultValue = defaultValue
        self.configuration = configuration
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isRequired = try values.decode(Bool.self, forKey: "required")
        self.schema = try values.decode(JSONTypeBean.self, forKey: "schema")
        self.name = try values.decode(String.self, forKey: "name")
        self.key = try values.decode(String.self, forKey: "key")
        self.autoCompleteURL = try values.decodeIfPresent(String.self, forKey: "autoCompleteUrl")
        self.hasDefaultValue = try values.decodeIfPresent(Bool.self, forKey: "hasDefaultValue")
        self.operations = try values.decode([String].self, forKey: "operations")
        self.allowedValues = try values.decodeIfPresent([AnyJSON].self, forKey: "allowedValues")
        self.defaultValue = try values.decodeIfPresent(AnyJSON.self, forKey: "defaultValue")
        self.configuration = try values.decodeIfPresent([String: AnyJSON].self, forKey: "configuration")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(isRequired, forKey: "required")
        try values.encode(schema, forKey: "schema")
        try values.encode(name, forKey: "name")
        try values.encode(key, forKey: "key")
        try values.encodeIfPresent(autoCompleteURL, forKey: "autoCompleteUrl")
        try values.encodeIfPresent(hasDefaultValue, forKey: "hasDefaultValue")
        try values.encode(operations, forKey: "operations")
        try values.encodeIfPresent(allowedValues, forKey: "allowedValues")
        try values.encodeIfPresent(defaultValue, forKey: "defaultValue")
        try values.encodeIfPresent(configuration, forKey: "configuration")
    }
}
