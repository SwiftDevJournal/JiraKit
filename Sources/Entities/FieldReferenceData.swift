// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of a field that can be used in advanced searches.
public struct FieldReferenceData: Codable {
    /// The field identifier.
    public var value: String?
    /// The display name contains the following:
    /// 
    ///  *  for system fields, the field name. For example, `Summary`.
    ///  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
    ///  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
    public var displayName: String?
    /// Whether the field can be used in a query's `ORDER BY` clause.
    public var orderable: Orderable?
    /// Whether the content of this field can be searched.
    public var searchable: Searchable?
    /// Whether the field provide auto-complete suggestions.
    public var auto: Auto?
    /// If the item is a custom field, the ID of the custom field.
    public var cfid: String?
    /// The valid search operators for the field.
    public var operators: [String]?
    /// The data types of items in the field.
    public var types: [String]?

    /// Whether the field can be used in a query's `ORDER BY` clause.
    public enum Orderable: String, Codable, CaseIterable {
        case `true`
        case `false`
    }

    /// Whether the content of this field can be searched.
    public enum Searchable: String, Codable, CaseIterable {
        case `true`
        case `false`
    }

    /// Whether the field provide auto-complete suggestions.
    public enum Auto: String, Codable, CaseIterable {
        case `true`
        case `false`
    }

    public init(value: String? = nil, displayName: String? = nil, orderable: Orderable? = nil, searchable: Searchable? = nil, auto: Auto? = nil, cfid: String? = nil, operators: [String]? = nil, types: [String]? = nil) {
        self.value = value
        self.displayName = displayName
        self.orderable = orderable
        self.searchable = searchable
        self.auto = auto
        self.cfid = cfid
        self.operators = operators
        self.types = types
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.value = try values.decodeIfPresent(String.self, forKey: "value")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
        self.orderable = try values.decodeIfPresent(Orderable.self, forKey: "orderable")
        self.searchable = try values.decodeIfPresent(Searchable.self, forKey: "searchable")
        self.auto = try values.decodeIfPresent(Auto.self, forKey: "auto")
        self.cfid = try values.decodeIfPresent(String.self, forKey: "cfid")
        self.operators = try values.decodeIfPresent([String].self, forKey: "operators")
        self.types = try values.decodeIfPresent([String].self, forKey: "types")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(value, forKey: "value")
        try values.encodeIfPresent(displayName, forKey: "displayName")
        try values.encodeIfPresent(orderable, forKey: "orderable")
        try values.encodeIfPresent(searchable, forKey: "searchable")
        try values.encodeIfPresent(auto, forKey: "auto")
        try values.encodeIfPresent(cfid, forKey: "cfid")
        try values.encodeIfPresent(operators, forKey: "operators")
        try values.encodeIfPresent(types, forKey: "types")
    }
}
