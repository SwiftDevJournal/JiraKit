// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator.
public struct FieldWasClause: Codable {
    /// A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
    public var field: JqlQueryField
    /// The operator between the field and operand.
    public var `operator`: Operator
    /// Details of an operand in a JQL clause.
    public var operand: JqlQueryClauseOperand
    /// The list of time predicates.
    public var predicates: [JqlQueryClauseTimePredicate]

    /// The operator between the field and operand.
    public enum Operator: String, Codable, CaseIterable {
        case was
        case wasIn = "was in"
        case wasNotIn = "was not in"
        case wasNot = "was not"
    }

    public init(field: JqlQueryField, `operator`: Operator, operand: JqlQueryClauseOperand, predicates: [JqlQueryClauseTimePredicate]) {
        self.field = field
        self.operator = `operator`
        self.operand = operand
        self.predicates = predicates
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.field = try values.decode(JqlQueryField.self, forKey: "field")
        self.operator = try values.decode(Operator.self, forKey: "operator")
        self.operand = try values.decode(JqlQueryClauseOperand.self, forKey: "operand")
        self.predicates = try values.decode([JqlQueryClauseTimePredicate].self, forKey: "predicates")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(field, forKey: "field")
        try values.encode(`operator`, forKey: "operator")
        try values.encode(operand, forKey: "operand")
        try values.encode(predicates, forKey: "predicates")
    }
}
