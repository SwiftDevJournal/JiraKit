// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of a filter.
public struct FilterDetails: Codable {
    /// Expand options that include additional filter details in the response.
    public var expand: String?
    /// The URL of the filter.
    public var this: URL?
    /// The unique identifier for the filter.
    public var id: String?
    /// The name of the filter.
    public var name: String
    /// The description of the filter.
    public var description: String?
    /// The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.
    public var owner: User?
    /// The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
    public var jql: String?
    /// A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
    public var viewURL: URL?
    /// A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
    public var searchURL: URL?
    /// Whether the filter is selected as a favorite by any users, not including the filter owner.
    public var isFavourite: Bool?
    /// The count of how many users have selected this filter as a favorite, including the filter owner.
    public var favouritedCount: Int?
    /// The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
    public var sharePermissions: [SharePermission]?
    /// The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.
    public var editPermissions: [SharePermission]?
    /// The users that are subscribed to the filter.
    public var subscriptions: [FilterSubscription]?

    public init(expand: String? = nil, this: URL? = nil, id: String? = nil, name: String, description: String? = nil, owner: User? = nil, jql: String? = nil, viewURL: URL? = nil, searchURL: URL? = nil, isFavourite: Bool? = nil, favouritedCount: Int? = nil, sharePermissions: [SharePermission]? = nil, editPermissions: [SharePermission]? = nil, subscriptions: [FilterSubscription]? = nil) {
        self.expand = expand
        self.this = this
        self.id = id
        self.name = name
        self.description = description
        self.owner = owner
        self.jql = jql
        self.viewURL = viewURL
        self.searchURL = searchURL
        self.isFavourite = isFavourite
        self.favouritedCount = favouritedCount
        self.sharePermissions = sharePermissions
        self.editPermissions = editPermissions
        self.subscriptions = subscriptions
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.owner = try values.decodeIfPresent(User.self, forKey: "owner")
        self.jql = try values.decodeIfPresent(String.self, forKey: "jql")
        self.viewURL = try values.decodeIfPresent(URL.self, forKey: "viewUrl")
        self.searchURL = try values.decodeIfPresent(URL.self, forKey: "searchUrl")
        self.isFavourite = try values.decodeIfPresent(Bool.self, forKey: "favourite")
        self.favouritedCount = try values.decodeIfPresent(Int.self, forKey: "favouritedCount")
        self.sharePermissions = try values.decodeIfPresent([SharePermission].self, forKey: "sharePermissions")
        self.editPermissions = try values.decodeIfPresent([SharePermission].self, forKey: "editPermissions")
        self.subscriptions = try values.decodeIfPresent([FilterSubscription].self, forKey: "subscriptions")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(owner, forKey: "owner")
        try values.encodeIfPresent(jql, forKey: "jql")
        try values.encodeIfPresent(viewURL, forKey: "viewUrl")
        try values.encodeIfPresent(searchURL, forKey: "searchUrl")
        try values.encodeIfPresent(isFavourite, forKey: "favourite")
        try values.encodeIfPresent(favouritedCount, forKey: "favouritedCount")
        try values.encodeIfPresent(sharePermissions, forKey: "sharePermissions")
        try values.encodeIfPresent(editPermissions, forKey: "editPermissions")
        try values.encodeIfPresent(subscriptions, forKey: "subscriptions")
    }
}
