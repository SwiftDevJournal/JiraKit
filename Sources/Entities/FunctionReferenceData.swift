// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of functions that can be used in advanced searches.
public struct FunctionReferenceData: Codable {
    /// The function identifier.
    public var value: String?
    /// The display name of the function.
    public var displayName: String?
    /// Whether the function can take a list of arguments.
    public var isList: IsList?
    /// The data types returned by the function.
    public var types: [String]?

    /// Whether the function can take a list of arguments.
    public enum IsList: String, Codable, CaseIterable {
        case `true`
        case `false`
    }

    public init(value: String? = nil, displayName: String? = nil, isList: IsList? = nil, types: [String]? = nil) {
        self.value = value
        self.displayName = displayName
        self.isList = isList
        self.types = types
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.value = try values.decodeIfPresent(String.self, forKey: "value")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
        self.isList = try values.decodeIfPresent(IsList.self, forKey: "isList")
        self.types = try values.decodeIfPresent([String].self, forKey: "types")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(value, forKey: "value")
        try values.encodeIfPresent(displayName, forKey: "displayName")
        try values.encodeIfPresent(isList, forKey: "isList")
        try values.encodeIfPresent(types, forKey: "types")
    }
}
