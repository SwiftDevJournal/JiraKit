// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct Group: Codable {
    /// The name of group.
    public var name: String?
    /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
    public var groupID: String?
    /// The URL for these group details.
    public var this: URL?
    /// A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.
    public var users: PagedListUserDetailsApplicationUser?
    /// Expand options that include additional group details in the response.
    public var expand: String?

    public init(name: String? = nil, groupID: String? = nil, this: URL? = nil, users: PagedListUserDetailsApplicationUser? = nil, expand: String? = nil) {
        self.name = name
        self.groupID = groupID
        self.this = this
        self.users = users
        self.expand = expand
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.groupID = try values.decodeIfPresent(String.self, forKey: "groupId")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.users = try values.decodeIfPresent(PagedListUserDetailsApplicationUser.self, forKey: "users")
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(groupID, forKey: "groupId")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(users, forKey: "users")
        try values.encodeIfPresent(expand, forKey: "expand")
    }
}
