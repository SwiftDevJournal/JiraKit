// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of issue history metadata.
public struct HistoryMetadata: Codable {
    /// The type of the history record.
    public var type: String?
    /// The description of the history record.
    public var description: String?
    /// The description key of the history record.
    public var descriptionKey: String?
    /// The activity described in the history record.
    public var activityDescription: String?
    /// The key of the activity described in the history record.
    public var activityDescriptionKey: String?
    /// The description of the email address associated the history record.
    public var emailDescription: String?
    /// The description key of the email address associated the history record.
    public var emailDescriptionKey: String?
    /// Details of the user whose action created the history record.
    public var actor: HistoryMetadataParticipant?
    /// Details of the system that generated the history record.
    public var generator: HistoryMetadataParticipant?
    /// Details of the cause that triggered the creation the history record.
    public var cause: HistoryMetadataParticipant?
    /// Additional arbitrary information about the history record.
    public var extraData: [String: String]?

    public init(type: String? = nil, description: String? = nil, descriptionKey: String? = nil, activityDescription: String? = nil, activityDescriptionKey: String? = nil, emailDescription: String? = nil, emailDescriptionKey: String? = nil, actor: HistoryMetadataParticipant? = nil, generator: HistoryMetadataParticipant? = nil, cause: HistoryMetadataParticipant? = nil, extraData: [String: String]? = nil) {
        self.type = type
        self.description = description
        self.descriptionKey = descriptionKey
        self.activityDescription = activityDescription
        self.activityDescriptionKey = activityDescriptionKey
        self.emailDescription = emailDescription
        self.emailDescriptionKey = emailDescriptionKey
        self.actor = actor
        self.generator = generator
        self.cause = cause
        self.extraData = extraData
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.descriptionKey = try values.decodeIfPresent(String.self, forKey: "descriptionKey")
        self.activityDescription = try values.decodeIfPresent(String.self, forKey: "activityDescription")
        self.activityDescriptionKey = try values.decodeIfPresent(String.self, forKey: "activityDescriptionKey")
        self.emailDescription = try values.decodeIfPresent(String.self, forKey: "emailDescription")
        self.emailDescriptionKey = try values.decodeIfPresent(String.self, forKey: "emailDescriptionKey")
        self.actor = try values.decodeIfPresent(HistoryMetadataParticipant.self, forKey: "actor")
        self.generator = try values.decodeIfPresent(HistoryMetadataParticipant.self, forKey: "generator")
        self.cause = try values.decodeIfPresent(HistoryMetadataParticipant.self, forKey: "cause")
        self.extraData = try values.decodeIfPresent([String: String].self, forKey: "extraData")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(descriptionKey, forKey: "descriptionKey")
        try values.encodeIfPresent(activityDescription, forKey: "activityDescription")
        try values.encodeIfPresent(activityDescriptionKey, forKey: "activityDescriptionKey")
        try values.encodeIfPresent(emailDescription, forKey: "emailDescription")
        try values.encodeIfPresent(emailDescriptionKey, forKey: "emailDescriptionKey")
        try values.encodeIfPresent(actor, forKey: "actor")
        try values.encodeIfPresent(generator, forKey: "generator")
        try values.encodeIfPresent(cause, forKey: "cause")
        try values.encodeIfPresent(extraData, forKey: "extraData")
    }
}
