// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about an issue.
public struct IssueBean: Codable {
    /// Expand options that include additional issue details in the response.
    public var expand: String?
    /// The ID of the issue.
    public var id: String?
    /// The URL of the issue details.
    public var this: URL?
    /// The key of the issue.
    public var key: String?
    /// The rendered value of each field present on the issue.
    public var renderedFields: [String: AnyJSON]?
    /// Details of the issue properties identified in the request.
    public var properties: [String: AnyJSON]?
    /// The ID and name of each field present on the issue.
    public var names: [String: String]?
    /// The schema describing each field present on the issue.
    public var schema: [String: JSONTypeBean]?
    /// The transitions that can be performed on the issue.
    public var transitions: [IssueTransition]?
    /// The operations that can be performed on the issue.
    public var operations: Operations?
    /// The metadata for the fields on the issue that can be amended.
    public var editmeta: IssueUpdateMetadata?
    /// Details of changelogs associated with the issue.
    public var changelog: PageOfChangelogs?
    /// The versions of each field on the issue.
    public var versionedRepresentations: [String: [String: AnyJSON]]?
    public var fieldsToInclude: IncludedFields?
    public var fields: [String: AnyJSON]?

    public init(expand: String? = nil, id: String? = nil, this: URL? = nil, key: String? = nil, renderedFields: [String: AnyJSON]? = nil, properties: [String: AnyJSON]? = nil, names: [String: String]? = nil, schema: [String: JSONTypeBean]? = nil, transitions: [IssueTransition]? = nil, operations: Operations? = nil, editmeta: IssueUpdateMetadata? = nil, changelog: PageOfChangelogs? = nil, versionedRepresentations: [String: [String: AnyJSON]]? = nil, fieldsToInclude: IncludedFields? = nil, fields: [String: AnyJSON]? = nil) {
        self.expand = expand
        self.id = id
        self.this = this
        self.key = key
        self.renderedFields = renderedFields
        self.properties = properties
        self.names = names
        self.schema = schema
        self.transitions = transitions
        self.operations = operations
        self.editmeta = editmeta
        self.changelog = changelog
        self.versionedRepresentations = versionedRepresentations
        self.fieldsToInclude = fieldsToInclude
        self.fields = fields
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.renderedFields = try values.decodeIfPresent([String: AnyJSON].self, forKey: "renderedFields")
        self.properties = try values.decodeIfPresent([String: AnyJSON].self, forKey: "properties")
        self.names = try values.decodeIfPresent([String: String].self, forKey: "names")
        self.schema = try values.decodeIfPresent([String: JSONTypeBean].self, forKey: "schema")
        self.transitions = try values.decodeIfPresent([IssueTransition].self, forKey: "transitions")
        self.operations = try values.decodeIfPresent(Operations.self, forKey: "operations")
        self.editmeta = try values.decodeIfPresent(IssueUpdateMetadata.self, forKey: "editmeta")
        self.changelog = try values.decodeIfPresent(PageOfChangelogs.self, forKey: "changelog")
        self.versionedRepresentations = try values.decodeIfPresent([String: [String: AnyJSON]].self, forKey: "versionedRepresentations")
        self.fieldsToInclude = try values.decodeIfPresent(IncludedFields.self, forKey: "fieldsToInclude")
        self.fields = try values.decodeIfPresent([String: AnyJSON].self, forKey: "fields")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(renderedFields, forKey: "renderedFields")
        try values.encodeIfPresent(properties, forKey: "properties")
        try values.encodeIfPresent(names, forKey: "names")
        try values.encodeIfPresent(schema, forKey: "schema")
        try values.encodeIfPresent(transitions, forKey: "transitions")
        try values.encodeIfPresent(operations, forKey: "operations")
        try values.encodeIfPresent(editmeta, forKey: "editmeta")
        try values.encodeIfPresent(changelog, forKey: "changelog")
        try values.encodeIfPresent(versionedRepresentations, forKey: "versionedRepresentations")
        try values.encodeIfPresent(fieldsToInclude, forKey: "fieldsToInclude")
        try values.encodeIfPresent(fields, forKey: "fields")
    }
}
