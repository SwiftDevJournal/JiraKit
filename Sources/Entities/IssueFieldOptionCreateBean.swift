// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct IssueFieldOptionCreateBean: Codable {
    /// The option's name, which is displayed in Jira.
    public var value: String
    /// The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.
    public var properties: [String: AnyJSON]?
    /// Details of the projects the option is available in.
    public var config: IssueFieldOptionConfiguration?

    public init(value: String, properties: [String: AnyJSON]? = nil, config: IssueFieldOptionConfiguration? = nil) {
        self.value = value
        self.properties = properties
        self.config = config
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.value = try values.decode(String.self, forKey: "value")
        self.properties = try values.decodeIfPresent([String: AnyJSON].self, forKey: "properties")
        self.config = try values.decodeIfPresent(IssueFieldOptionConfiguration.self, forKey: "config")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(value, forKey: "value")
        try values.encodeIfPresent(properties, forKey: "properties")
        try values.encodeIfPresent(config, forKey: "config")
    }
}
