// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// This object is used as follows:
/// 
///  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).
///  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types.
public struct IssueLinkType: Codable {
    /// The ID of the issue link type and is used as follows:
    /// 
    ///  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
    ///  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only.
    public var id: String?
    /// The name of the issue link type and is used as follows:
    /// 
    ///  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
    ///  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    public var name: String?
    /// The description of the issue link type inward link and is used as follows:
    /// 
    ///  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
    ///  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    public var inward: String?
    /// The description of the issue link type outward link and is used as follows:
    /// 
    ///  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
    ///  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    public var outward: String?
    /// The URL of the issue link type. Read only.
    public var this: URL?

    public init(id: String? = nil, name: String? = nil, inward: String? = nil, outward: String? = nil, this: URL? = nil) {
        self.id = id
        self.name = name
        self.inward = inward
        self.outward = outward
        self.this = this
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.inward = try values.decodeIfPresent(String.self, forKey: "inward")
        self.outward = try values.decodeIfPresent(String.self, forKey: "outward")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(inward, forKey: "inward")
        try values.encodeIfPresent(outward, forKey: "outward")
        try values.encodeIfPresent(this, forKey: "self")
    }
}
