// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A type of issue suggested for use in auto-completion.
public struct IssuePickerSuggestionsIssueType: Codable {
    /// The label of the type of issues suggested for use in auto-completion.
    public var label: String?
    /// If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
    public var sub: String?
    /// The ID of the type of issues suggested for use in auto-completion.
    public var id: String?
    /// If no issue suggestions are found, returns a message indicating no suggestions were found,
    public var msg: String?
    /// A list of issues suggested for use in auto-completion.
    public var issues: [SuggestedIssue]?

    public init(label: String? = nil, sub: String? = nil, id: String? = nil, msg: String? = nil, issues: [SuggestedIssue]? = nil) {
        self.label = label
        self.sub = sub
        self.id = id
        self.msg = msg
        self.issues = issues
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.label = try values.decodeIfPresent(String.self, forKey: "label")
        self.sub = try values.decodeIfPresent(String.self, forKey: "sub")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.msg = try values.decodeIfPresent(String.self, forKey: "msg")
        self.issues = try values.decodeIfPresent([SuggestedIssue].self, forKey: "issues")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(label, forKey: "label")
        try values.encodeIfPresent(sub, forKey: "sub")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(msg, forKey: "msg")
        try values.encodeIfPresent(issues, forKey: "issues")
    }
}
