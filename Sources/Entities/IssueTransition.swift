// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an issue transition.
public struct IssueTransition: Codable {
    /// The ID of the issue transition. Required when specifying a transition to undertake.
    public var id: String?
    /// The name of the issue transition.
    public var name: String?
    /// Details of the issue status after the transition.
    public var to: StatusDetails?
    /// Whether there is a screen associated with the issue transition.
    public var hasScreen: Bool?
    /// Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
    public var isGlobal: Bool?
    /// Whether this is the initial issue transition for the workflow.
    public var isInitial: Bool?
    /// Whether the transition is available to be performed.
    public var isAvailable: Bool?
    /// Whether the issue has to meet criteria before the issue transition is applied.
    public var isConditional: Bool?
    /// Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
    public var fields: [String: FieldMetadata]?
    /// Expand options that include additional transition details in the response.
    public var expand: String?
    public var isLooped: Bool?

    public init(id: String? = nil, name: String? = nil, to: StatusDetails? = nil, hasScreen: Bool? = nil, isGlobal: Bool? = nil, isInitial: Bool? = nil, isAvailable: Bool? = nil, isConditional: Bool? = nil, fields: [String: FieldMetadata]? = nil, expand: String? = nil, isLooped: Bool? = nil) {
        self.id = id
        self.name = name
        self.to = to
        self.hasScreen = hasScreen
        self.isGlobal = isGlobal
        self.isInitial = isInitial
        self.isAvailable = isAvailable
        self.isConditional = isConditional
        self.fields = fields
        self.expand = expand
        self.isLooped = isLooped
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.to = try values.decodeIfPresent(StatusDetails.self, forKey: "to")
        self.hasScreen = try values.decodeIfPresent(Bool.self, forKey: "hasScreen")
        self.isGlobal = try values.decodeIfPresent(Bool.self, forKey: "isGlobal")
        self.isInitial = try values.decodeIfPresent(Bool.self, forKey: "isInitial")
        self.isAvailable = try values.decodeIfPresent(Bool.self, forKey: "isAvailable")
        self.isConditional = try values.decodeIfPresent(Bool.self, forKey: "isConditional")
        self.fields = try values.decodeIfPresent([String: FieldMetadata].self, forKey: "fields")
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.isLooped = try values.decodeIfPresent(Bool.self, forKey: "looped")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(to, forKey: "to")
        try values.encodeIfPresent(hasScreen, forKey: "hasScreen")
        try values.encodeIfPresent(isGlobal, forKey: "isGlobal")
        try values.encodeIfPresent(isInitial, forKey: "isInitial")
        try values.encodeIfPresent(isAvailable, forKey: "isAvailable")
        try values.encodeIfPresent(isConditional, forKey: "isConditional")
        try values.encodeIfPresent(fields, forKey: "fields")
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(isLooped, forKey: "looped")
    }
}
