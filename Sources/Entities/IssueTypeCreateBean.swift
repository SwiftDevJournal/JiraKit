// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct IssueTypeCreateBean: Codable {
    /// The unique name for the issue type. The maximum length is 60 characters.
    public var name: String
    /// The description of the issue type.
    public var description: String?
    /// Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.
    /// 
    /// Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
    public var type: `Type`?
    /// The hierarchy level of the issue type. Use:
    /// 
    ///  *  `-1` for Subtask.
    ///  *  `0` for Base.
    /// 
    /// Defaults to `0`.
    public var hierarchyLevel: Int?

    /// Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.
    /// 
    /// Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
    public enum `Type`: String, Codable, CaseIterable {
        case subtask
        case standard
    }

    public init(name: String, description: String? = nil, type: `Type`? = nil, hierarchyLevel: Int? = nil) {
        self.name = name
        self.description = description
        self.type = type
        self.hierarchyLevel = hierarchyLevel
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
        self.hierarchyLevel = try values.decodeIfPresent(Int.self, forKey: "hierarchyLevel")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(hierarchyLevel, forKey: "hierarchyLevel")
    }
}
