// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about an issue type.
public struct IssueTypeDetails: Codable {
    /// The URL of these issue type details.
    public var this: String?
    /// The ID of the issue type.
    public var id: String?
    /// The description of the issue type.
    public var description: String?
    /// The URL of the issue type's avatar.
    public var iconURL: String?
    /// The name of the issue type.
    public var name: String?
    /// Whether this issue type is used to create subtasks.
    public var isSubtask: Bool?
    /// The ID of the issue type's avatar.
    public var avatarID: Int?
    /// Unique ID for next-gen projects.
    public var entityID: UUID?
    /// Hierarchy level of the issue type.
    public var hierarchyLevel: Int?
    /// Details of the next-gen projects the issue type is available in.
    public var scope: Scope?

    public init(this: String? = nil, id: String? = nil, description: String? = nil, iconURL: String? = nil, name: String? = nil, isSubtask: Bool? = nil, avatarID: Int? = nil, entityID: UUID? = nil, hierarchyLevel: Int? = nil, scope: Scope? = nil) {
        self.this = this
        self.id = id
        self.description = description
        self.iconURL = iconURL
        self.name = name
        self.isSubtask = isSubtask
        self.avatarID = avatarID
        self.entityID = entityID
        self.hierarchyLevel = hierarchyLevel
        self.scope = scope
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.this = try values.decodeIfPresent(String.self, forKey: "self")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.iconURL = try values.decodeIfPresent(String.self, forKey: "iconUrl")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.isSubtask = try values.decodeIfPresent(Bool.self, forKey: "subtask")
        self.avatarID = try values.decodeIfPresent(Int.self, forKey: "avatarId")
        self.entityID = try values.decodeIfPresent(UUID.self, forKey: "entityId")
        self.hierarchyLevel = try values.decodeIfPresent(Int.self, forKey: "hierarchyLevel")
        self.scope = try values.decodeIfPresent(Scope.self, forKey: "scope")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(iconURL, forKey: "iconUrl")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(isSubtask, forKey: "subtask")
        try values.encodeIfPresent(avatarID, forKey: "avatarId")
        try values.encodeIfPresent(entityID, forKey: "entityId")
        try values.encodeIfPresent(hierarchyLevel, forKey: "hierarchyLevel")
        try values.encodeIfPresent(scope, forKey: "scope")
    }
}
