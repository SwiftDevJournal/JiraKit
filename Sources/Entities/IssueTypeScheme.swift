// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an issue type scheme.
public struct IssueTypeScheme: Codable {
    /// The ID of the issue type scheme.
    public var id: String
    /// The name of the issue type scheme.
    public var name: String
    /// The description of the issue type scheme.
    public var description: String?
    /// The ID of the default issue type of the issue type scheme.
    public var defaultIssueTypeID: String?
    /// Whether the issue type scheme is the default.
    public var isDefault: Bool?

    public init(id: String, name: String, description: String? = nil, defaultIssueTypeID: String? = nil, isDefault: Bool? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.defaultIssueTypeID = defaultIssueTypeID
        self.isDefault = isDefault
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.defaultIssueTypeID = try values.decodeIfPresent(String.self, forKey: "defaultIssueTypeId")
        self.isDefault = try values.decodeIfPresent(Bool.self, forKey: "isDefault")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(defaultIssueTypeID, forKey: "defaultIssueTypeId")
        try values.encodeIfPresent(isDefault, forKey: "isDefault")
    }
}
