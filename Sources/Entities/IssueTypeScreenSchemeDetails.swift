// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The details of an issue type screen scheme.
public struct IssueTypeScreenSchemeDetails: Codable {
    /// The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
    public var name: String
    /// The description of the issue type screen scheme. The maximum length is 255 characters.
    public var description: String?
    /// The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
    public var issueTypeMappings: [IssueTypeScreenSchemeMapping]

    public init(name: String, description: String? = nil, issueTypeMappings: [IssueTypeScreenSchemeMapping]) {
        self.name = name
        self.description = description
        self.issueTypeMappings = issueTypeMappings
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.issueTypeMappings = try values.decode([IssueTypeScreenSchemeMapping].self, forKey: "issueTypeMappings")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(issueTypeMappings, forKey: "issueTypeMappings")
    }
}
