// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The screen scheme for an issue type.
public struct IssueTypeScreenSchemeItem: Codable {
    /// The ID of the issue type screen scheme.
    public var issueTypeScreenSchemeID: String
    /// The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided.
    public var issueTypeID: String
    /// The ID of the screen scheme.
    public var screenSchemeID: String

    public init(issueTypeScreenSchemeID: String, issueTypeID: String, screenSchemeID: String) {
        self.issueTypeScreenSchemeID = issueTypeScreenSchemeID
        self.issueTypeID = issueTypeID
        self.screenSchemeID = screenSchemeID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.issueTypeScreenSchemeID = try values.decode(String.self, forKey: "issueTypeScreenSchemeId")
        self.issueTypeID = try values.decode(String.self, forKey: "issueTypeId")
        self.screenSchemeID = try values.decode(String.self, forKey: "screenSchemeId")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(issueTypeScreenSchemeID, forKey: "issueTypeScreenSchemeId")
        try values.encode(issueTypeID, forKey: "issueTypeId")
        try values.encode(screenSchemeID, forKey: "screenSchemeId")
    }
}
