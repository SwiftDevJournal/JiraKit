// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Mapping of an issue type to a context.
public struct IssueTypeToContextMapping: Codable {
    /// The ID of the context.
    public var contextID: String
    /// The ID of the issue type.
    public var issueTypeID: String?
    /// Whether the context is mapped to any issue type.
    public var isAnyIssueType: Bool?

    public init(contextID: String, issueTypeID: String? = nil, isAnyIssueType: Bool? = nil) {
        self.contextID = contextID
        self.issueTypeID = issueTypeID
        self.isAnyIssueType = isAnyIssueType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.contextID = try values.decode(String.self, forKey: "contextId")
        self.issueTypeID = try values.decodeIfPresent(String.self, forKey: "issueTypeId")
        self.isAnyIssueType = try values.decodeIfPresent(Bool.self, forKey: "isAnyIssueType")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(contextID, forKey: "contextId")
        try values.encodeIfPresent(issueTypeID, forKey: "issueTypeId")
        try values.encodeIfPresent(isAnyIssueType, forKey: "isAnyIssueType")
    }
}
