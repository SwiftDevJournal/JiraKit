// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about the mapping between issue types and a workflow.
public struct IssueTypesWorkflowMapping: Codable {
    /// The name of the workflow. Optional if updating the workflow-issue types mapping.
    public var workflow: String?
    /// The list of issue type IDs.
    public var issueTypes: [String]?
    /// Whether the workflow is the default workflow for the workflow scheme.
    public var isDefaultMapping: Bool?
    /// Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`.
    public var isUpdateDraftIfNeeded: Bool?

    public init(workflow: String? = nil, issueTypes: [String]? = nil, isDefaultMapping: Bool? = nil, isUpdateDraftIfNeeded: Bool? = nil) {
        self.workflow = workflow
        self.issueTypes = issueTypes
        self.isDefaultMapping = isDefaultMapping
        self.isUpdateDraftIfNeeded = isUpdateDraftIfNeeded
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.workflow = try values.decodeIfPresent(String.self, forKey: "workflow")
        self.issueTypes = try values.decodeIfPresent([String].self, forKey: "issueTypes")
        self.isDefaultMapping = try values.decodeIfPresent(Bool.self, forKey: "defaultMapping")
        self.isUpdateDraftIfNeeded = try values.decodeIfPresent(Bool.self, forKey: "updateDraftIfNeeded")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(workflow, forKey: "workflow")
        try values.encodeIfPresent(issueTypes, forKey: "issueTypes")
        try values.encodeIfPresent(isDefaultMapping, forKey: "defaultMapping")
        try values.encodeIfPresent(isUpdateDraftIfNeeded, forKey: "updateDraftIfNeeded")
    }
}
