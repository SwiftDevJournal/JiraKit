// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an issue update request.
public struct IssueUpdateDetails: Codable {
    /// Details of a transition. Required when performing a transition, optional when creating or editing an issue.
    public var transition: IssueTransition?
    /// List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
    public var fields: [String: AnyJSON]?
    /// A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
    public var update: [String: [FieldUpdateOperation]]?
    /// Additional issue history details.
    public var historyMetadata: HistoryMetadata?
    /// Details of issue properties to be add or update.
    public var properties: [EntityProperty]?

    public init(transition: IssueTransition? = nil, fields: [String: AnyJSON]? = nil, update: [String: [FieldUpdateOperation]]? = nil, historyMetadata: HistoryMetadata? = nil, properties: [EntityProperty]? = nil) {
        self.transition = transition
        self.fields = fields
        self.update = update
        self.historyMetadata = historyMetadata
        self.properties = properties
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.transition = try values.decodeIfPresent(IssueTransition.self, forKey: "transition")
        self.fields = try values.decodeIfPresent([String: AnyJSON].self, forKey: "fields")
        self.update = try values.decodeIfPresent([String: [FieldUpdateOperation]].self, forKey: "update")
        self.historyMetadata = try values.decodeIfPresent(HistoryMetadata.self, forKey: "historyMetadata")
        self.properties = try values.decodeIfPresent([EntityProperty].self, forKey: "properties")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(transition, forKey: "transition")
        try values.encodeIfPresent(fields, forKey: "fields")
        try values.encodeIfPresent(update, forKey: "update")
        try values.encodeIfPresent(historyMetadata, forKey: "historyMetadata")
        try values.encodeIfPresent(properties, forKey: "properties")
    }
}
