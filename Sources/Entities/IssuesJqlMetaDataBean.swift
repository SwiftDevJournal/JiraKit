// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The description of the page of issues loaded by the provided JQL query.
public struct IssuesJqlMetaDataBean: Codable {
    /// The index of the first issue.
    public var startAt: Int64
    /// The maximum number of issues that could be loaded in this evaluation.
    public var maxResults: Int32
    /// The number of issues that were loaded in this evaluation.
    public var count: Int32
    /// The total number of issues the JQL returned.
    public var totalCount: Int64
    /// Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.
    public var validationWarnings: [String]?

    public init(startAt: Int64, maxResults: Int32, count: Int32, totalCount: Int64, validationWarnings: [String]? = nil) {
        self.startAt = startAt
        self.maxResults = maxResults
        self.count = count
        self.totalCount = totalCount
        self.validationWarnings = validationWarnings
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.startAt = try values.decode(Int64.self, forKey: "startAt")
        self.maxResults = try values.decode(Int32.self, forKey: "maxResults")
        self.count = try values.decode(Int32.self, forKey: "count")
        self.totalCount = try values.decode(Int64.self, forKey: "totalCount")
        self.validationWarnings = try values.decodeIfPresent([String].self, forKey: "validationWarnings")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(startAt, forKey: "startAt")
        try values.encode(maxResults, forKey: "maxResults")
        try values.encode(count, forKey: "count")
        try values.encode(totalCount, forKey: "totalCount")
        try values.encodeIfPresent(validationWarnings, forKey: "validationWarnings")
    }
}
