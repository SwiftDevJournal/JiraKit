// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Lists of JQL reference data.
public struct JQLReferenceData: Codable {
    /// List of fields usable in JQL queries.
    public var visibleFieldNames: [FieldReferenceData]?
    /// List of functions usable in JQL queries.
    public var visibleFunctionNames: [FunctionReferenceData]?
    /// List of JQL query reserved words.
    public var jqlReservedWords: [String]?

    public init(visibleFieldNames: [FieldReferenceData]? = nil, visibleFunctionNames: [FunctionReferenceData]? = nil, jqlReservedWords: [String]? = nil) {
        self.visibleFieldNames = visibleFieldNames
        self.visibleFunctionNames = visibleFunctionNames
        self.jqlReservedWords = jqlReservedWords
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.visibleFieldNames = try values.decodeIfPresent([FieldReferenceData].self, forKey: "visibleFieldNames")
        self.visibleFunctionNames = try values.decodeIfPresent([FunctionReferenceData].self, forKey: "visibleFunctionNames")
        self.jqlReservedWords = try values.decodeIfPresent([String].self, forKey: "jqlReservedWords")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(visibleFieldNames, forKey: "visibleFieldNames")
        try values.encodeIfPresent(visibleFunctionNames, forKey: "visibleFunctionNames")
        try values.encodeIfPresent(jqlReservedWords, forKey: "jqlReservedWords")
    }
}
