// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct JSONNode: Codable {
    public var elements: [String: AnyJSON]?
    public var isFloatingPointNumber: Bool?
    public var isPojo: Bool?
    public var isNumber: Bool?
    public var isIntegralNumber: Bool?
    public var isInt: Bool?
    public var isLong: Bool?
    public var isDouble: Bool?
    public var isBigDecimal: Bool?
    public var isBigInteger: Bool?
    public var isTextual: Bool?
    public var isBoolean: Bool?
    public var isBinary: Bool?
    public var isContainerNode: Bool?
    public var isMissingNode: Bool?
    public var isObject: Bool?
    public var isValueNode: Bool?
    public var numberValue: Double?
    public var numberType: NumberType?
    public var intValue: Int?
    public var longValue: Int?
    public var bigIntegerValue: Int?
    public var doubleValue: Double?
    public var decimalValue: Double?
    public var isBooleanValue: Bool?
    public var binaryValue: [Data]?
    public var valueAsInt: Int?
    public var valueAsLong: Int?
    public var valueAsDouble: Double?
    public var isValueAsBoolean: Bool?
    public var textValue: String?
    public var valueAsText: String?
    public var fieldNames: [String: AnyJSON]?
    public var isArray: Bool?
    public var fields: [String: AnyJSON]?
    public var isNull: Bool?

    public enum NumberType: String, Codable, CaseIterable {
        case int = "INT"
        case long = "LONG"
        case bigInteger = "BIG_INTEGER"
        case float = "FLOAT"
        case double = "DOUBLE"
        case bigDecimal = "BIG_DECIMAL"
    }

    public init(elements: [String: AnyJSON]? = nil, isFloatingPointNumber: Bool? = nil, isPojo: Bool? = nil, isNumber: Bool? = nil, isIntegralNumber: Bool? = nil, isInt: Bool? = nil, isLong: Bool? = nil, isDouble: Bool? = nil, isBigDecimal: Bool? = nil, isBigInteger: Bool? = nil, isTextual: Bool? = nil, isBoolean: Bool? = nil, isBinary: Bool? = nil, isContainerNode: Bool? = nil, isMissingNode: Bool? = nil, isObject: Bool? = nil, isValueNode: Bool? = nil, numberValue: Double? = nil, numberType: NumberType? = nil, intValue: Int? = nil, longValue: Int? = nil, bigIntegerValue: Int? = nil, doubleValue: Double? = nil, decimalValue: Double? = nil, isBooleanValue: Bool? = nil, binaryValue: [Data]? = nil, valueAsInt: Int? = nil, valueAsLong: Int? = nil, valueAsDouble: Double? = nil, isValueAsBoolean: Bool? = nil, textValue: String? = nil, valueAsText: String? = nil, fieldNames: [String: AnyJSON]? = nil, isArray: Bool? = nil, fields: [String: AnyJSON]? = nil, isNull: Bool? = nil) {
        self.elements = elements
        self.isFloatingPointNumber = isFloatingPointNumber
        self.isPojo = isPojo
        self.isNumber = isNumber
        self.isIntegralNumber = isIntegralNumber
        self.isInt = isInt
        self.isLong = isLong
        self.isDouble = isDouble
        self.isBigDecimal = isBigDecimal
        self.isBigInteger = isBigInteger
        self.isTextual = isTextual
        self.isBoolean = isBoolean
        self.isBinary = isBinary
        self.isContainerNode = isContainerNode
        self.isMissingNode = isMissingNode
        self.isObject = isObject
        self.isValueNode = isValueNode
        self.numberValue = numberValue
        self.numberType = numberType
        self.intValue = intValue
        self.longValue = longValue
        self.bigIntegerValue = bigIntegerValue
        self.doubleValue = doubleValue
        self.decimalValue = decimalValue
        self.isBooleanValue = isBooleanValue
        self.binaryValue = binaryValue
        self.valueAsInt = valueAsInt
        self.valueAsLong = valueAsLong
        self.valueAsDouble = valueAsDouble
        self.isValueAsBoolean = isValueAsBoolean
        self.textValue = textValue
        self.valueAsText = valueAsText
        self.fieldNames = fieldNames
        self.isArray = isArray
        self.fields = fields
        self.isNull = isNull
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.elements = try values.decodeIfPresent([String: AnyJSON].self, forKey: "elements")
        self.isFloatingPointNumber = try values.decodeIfPresent(Bool.self, forKey: "floatingPointNumber")
        self.isPojo = try values.decodeIfPresent(Bool.self, forKey: "pojo")
        self.isNumber = try values.decodeIfPresent(Bool.self, forKey: "number")
        self.isIntegralNumber = try values.decodeIfPresent(Bool.self, forKey: "integralNumber")
        self.isInt = try values.decodeIfPresent(Bool.self, forKey: "int")
        self.isLong = try values.decodeIfPresent(Bool.self, forKey: "long")
        self.isDouble = try values.decodeIfPresent(Bool.self, forKey: "double")
        self.isBigDecimal = try values.decodeIfPresent(Bool.self, forKey: "bigDecimal")
        self.isBigInteger = try values.decodeIfPresent(Bool.self, forKey: "bigInteger")
        self.isTextual = try values.decodeIfPresent(Bool.self, forKey: "textual")
        self.isBoolean = try values.decodeIfPresent(Bool.self, forKey: "boolean")
        self.isBinary = try values.decodeIfPresent(Bool.self, forKey: "binary")
        self.isContainerNode = try values.decodeIfPresent(Bool.self, forKey: "containerNode")
        self.isMissingNode = try values.decodeIfPresent(Bool.self, forKey: "missingNode")
        self.isObject = try values.decodeIfPresent(Bool.self, forKey: "object")
        self.isValueNode = try values.decodeIfPresent(Bool.self, forKey: "valueNode")
        self.numberValue = try values.decodeIfPresent(Double.self, forKey: "numberValue")
        self.numberType = try values.decodeIfPresent(NumberType.self, forKey: "numberType")
        self.intValue = try values.decodeIfPresent(Int.self, forKey: "intValue")
        self.longValue = try values.decodeIfPresent(Int.self, forKey: "longValue")
        self.bigIntegerValue = try values.decodeIfPresent(Int.self, forKey: "bigIntegerValue")
        self.doubleValue = try values.decodeIfPresent(Double.self, forKey: "doubleValue")
        self.decimalValue = try values.decodeIfPresent(Double.self, forKey: "decimalValue")
        self.isBooleanValue = try values.decodeIfPresent(Bool.self, forKey: "booleanValue")
        self.binaryValue = try values.decodeIfPresent([Data].self, forKey: "binaryValue")
        self.valueAsInt = try values.decodeIfPresent(Int.self, forKey: "valueAsInt")
        self.valueAsLong = try values.decodeIfPresent(Int.self, forKey: "valueAsLong")
        self.valueAsDouble = try values.decodeIfPresent(Double.self, forKey: "valueAsDouble")
        self.isValueAsBoolean = try values.decodeIfPresent(Bool.self, forKey: "valueAsBoolean")
        self.textValue = try values.decodeIfPresent(String.self, forKey: "textValue")
        self.valueAsText = try values.decodeIfPresent(String.self, forKey: "valueAsText")
        self.fieldNames = try values.decodeIfPresent([String: AnyJSON].self, forKey: "fieldNames")
        self.isArray = try values.decodeIfPresent(Bool.self, forKey: "array")
        self.fields = try values.decodeIfPresent([String: AnyJSON].self, forKey: "fields")
        self.isNull = try values.decodeIfPresent(Bool.self, forKey: "null")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(elements, forKey: "elements")
        try values.encodeIfPresent(isFloatingPointNumber, forKey: "floatingPointNumber")
        try values.encodeIfPresent(isPojo, forKey: "pojo")
        try values.encodeIfPresent(isNumber, forKey: "number")
        try values.encodeIfPresent(isIntegralNumber, forKey: "integralNumber")
        try values.encodeIfPresent(isInt, forKey: "int")
        try values.encodeIfPresent(isLong, forKey: "long")
        try values.encodeIfPresent(isDouble, forKey: "double")
        try values.encodeIfPresent(isBigDecimal, forKey: "bigDecimal")
        try values.encodeIfPresent(isBigInteger, forKey: "bigInteger")
        try values.encodeIfPresent(isTextual, forKey: "textual")
        try values.encodeIfPresent(isBoolean, forKey: "boolean")
        try values.encodeIfPresent(isBinary, forKey: "binary")
        try values.encodeIfPresent(isContainerNode, forKey: "containerNode")
        try values.encodeIfPresent(isMissingNode, forKey: "missingNode")
        try values.encodeIfPresent(isObject, forKey: "object")
        try values.encodeIfPresent(isValueNode, forKey: "valueNode")
        try values.encodeIfPresent(numberValue, forKey: "numberValue")
        try values.encodeIfPresent(numberType, forKey: "numberType")
        try values.encodeIfPresent(intValue, forKey: "intValue")
        try values.encodeIfPresent(longValue, forKey: "longValue")
        try values.encodeIfPresent(bigIntegerValue, forKey: "bigIntegerValue")
        try values.encodeIfPresent(doubleValue, forKey: "doubleValue")
        try values.encodeIfPresent(decimalValue, forKey: "decimalValue")
        try values.encodeIfPresent(isBooleanValue, forKey: "booleanValue")
        try values.encodeIfPresent(binaryValue, forKey: "binaryValue")
        try values.encodeIfPresent(valueAsInt, forKey: "valueAsInt")
        try values.encodeIfPresent(valueAsLong, forKey: "valueAsLong")
        try values.encodeIfPresent(valueAsDouble, forKey: "valueAsDouble")
        try values.encodeIfPresent(isValueAsBoolean, forKey: "valueAsBoolean")
        try values.encodeIfPresent(textValue, forKey: "textValue")
        try values.encodeIfPresent(valueAsText, forKey: "valueAsText")
        try values.encodeIfPresent(fieldNames, forKey: "fieldNames")
        try values.encodeIfPresent(isArray, forKey: "array")
        try values.encodeIfPresent(fields, forKey: "fields")
        try values.encodeIfPresent(isNull, forKey: "null")
    }
}
