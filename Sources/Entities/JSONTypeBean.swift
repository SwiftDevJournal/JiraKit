// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The schema of a field.
public struct JSONTypeBean: Codable {
    /// The data type of the field.
    public var type: String
    /// When the data type is an array, the name of the field items within the array.
    public var items: String?
    /// If the field is a system field, the name of the field.
    public var system: String?
    /// If the field is a custom field, the URI of the field.
    public var custom: String?
    /// If the field is a custom field, the custom ID of the field.
    public var customID: Int64?
    /// If the field is a custom field, the configuration of the field.
    public var configuration: [String: AnyJSON]?

    public init(type: String, items: String? = nil, system: String? = nil, custom: String? = nil, customID: Int64? = nil, configuration: [String: AnyJSON]? = nil) {
        self.type = type
        self.items = items
        self.system = system
        self.custom = custom
        self.customID = customID
        self.configuration = configuration
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(String.self, forKey: "type")
        self.items = try values.decodeIfPresent(String.self, forKey: "items")
        self.system = try values.decodeIfPresent(String.self, forKey: "system")
        self.custom = try values.decodeIfPresent(String.self, forKey: "custom")
        self.customID = try values.decodeIfPresent(Int64.self, forKey: "customId")
        self.configuration = try values.decodeIfPresent([String: AnyJSON].self, forKey: "configuration")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(items, forKey: "items")
        try values.encodeIfPresent(system, forKey: "system")
        try values.encodeIfPresent(custom, forKey: "custom")
        try values.encodeIfPresent(customID, forKey: "customId")
        try values.encodeIfPresent(configuration, forKey: "configuration")
    }
}
