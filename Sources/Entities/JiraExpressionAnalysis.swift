// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about the analysed Jira expression.
public struct JiraExpressionAnalysis: Codable {
    /// The analysed expression.
    public var expression: String
    /// A list of validation errors. Not included if the expression is valid.
    public var errors: [JiraExpressionValidationError]?
    /// Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
    public var isValid: Bool
    /// EXPERIMENTAL. The inferred type of the expression.
    public var type: String?
    /// Details about the complexity of the analysed Jira expression.
    public var complexity: JiraExpressionComplexity?

    public init(expression: String, errors: [JiraExpressionValidationError]? = nil, isValid: Bool, type: String? = nil, complexity: JiraExpressionComplexity? = nil) {
        self.expression = expression
        self.errors = errors
        self.isValid = isValid
        self.type = type
        self.complexity = complexity
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expression = try values.decode(String.self, forKey: "expression")
        self.errors = try values.decodeIfPresent([JiraExpressionValidationError].self, forKey: "errors")
        self.isValid = try values.decode(Bool.self, forKey: "valid")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.complexity = try values.decodeIfPresent(JiraExpressionComplexity.self, forKey: "complexity")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(expression, forKey: "expression")
        try values.encodeIfPresent(errors, forKey: "errors")
        try values.encode(isValid, forKey: "valid")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(complexity, forKey: "complexity")
    }
}
