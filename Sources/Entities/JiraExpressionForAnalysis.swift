// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of Jira expressions for analysis.
public struct JiraExpressionForAnalysis: Codable {
    /// The list of Jira expressions to analyse.
    ///
    /// Example: "issues.map(issue => issue.properties['property_key'])"
    public var expressions: [String]
    /// Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
    public var contextVariables: [String: String]?

    public init(expressions: [String], contextVariables: [String: String]? = nil) {
        self.expressions = expressions
        self.contextVariables = contextVariables
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expressions = try values.decode([String].self, forKey: "expressions")
        self.contextVariables = try values.decodeIfPresent([String: String].self, forKey: "contextVariables")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(expressions, forKey: "expressions")
        try values.encodeIfPresent(contextVariables, forKey: "contextVariables")
    }
}
