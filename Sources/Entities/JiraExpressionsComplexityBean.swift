// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct JiraExpressionsComplexityBean: Codable {
    /// The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
    public var steps: JiraExpressionsComplexityValueBean
    /// The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
    public var expensiveOperations: JiraExpressionsComplexityValueBean
    /// The number of Jira REST API beans returned in the response.
    public var beans: JiraExpressionsComplexityValueBean
    /// The number of primitive values returned in the response.
    public var primitiveValues: JiraExpressionsComplexityValueBean

    public init(steps: JiraExpressionsComplexityValueBean, expensiveOperations: JiraExpressionsComplexityValueBean, beans: JiraExpressionsComplexityValueBean, primitiveValues: JiraExpressionsComplexityValueBean) {
        self.steps = steps
        self.expensiveOperations = expensiveOperations
        self.beans = beans
        self.primitiveValues = primitiveValues
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.steps = try values.decode(JiraExpressionsComplexityValueBean.self, forKey: "steps")
        self.expensiveOperations = try values.decode(JiraExpressionsComplexityValueBean.self, forKey: "expensiveOperations")
        self.beans = try values.decode(JiraExpressionsComplexityValueBean.self, forKey: "beans")
        self.primitiveValues = try values.decode(JiraExpressionsComplexityValueBean.self, forKey: "primitiveValues")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(steps, forKey: "steps")
        try values.encode(expensiveOperations, forKey: "expensiveOperations")
        try values.encode(beans, forKey: "beans")
        try values.encode(primitiveValues, forKey: "primitiveValues")
    }
}
