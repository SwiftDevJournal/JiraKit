// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an operand in a JQL clause.
public struct JqlQueryClauseOperand: Codable {
    /// An operand that is a list of values.
    public var listOperand: ListOperand?
    /// An operand that is a user-provided value.
    public var valueOperand: ValueOperand?
    /// An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
    public var functionOperand: FunctionOperand?
    /// An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords.
    public var keywordOperand: KeywordOperand?

    public init(listOperand: ListOperand? = nil, valueOperand: ValueOperand? = nil, functionOperand: FunctionOperand? = nil, keywordOperand: KeywordOperand? = nil) {
        self.listOperand = listOperand
        self.valueOperand = valueOperand
        self.functionOperand = functionOperand
        self.keywordOperand = keywordOperand
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.listOperand = try? container.decode(ListOperand.self)
        self.valueOperand = try? container.decode(ValueOperand.self)
        self.functionOperand = try? container.decode(FunctionOperand.self)
        self.keywordOperand = try? container.decode(KeywordOperand.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = listOperand { try container.encode(value) }
        if let value = valueOperand { try container.encode(value) }
        if let value = functionOperand { try container.encode(value) }
        if let value = keywordOperand { try container.encode(value) }
    }
}
