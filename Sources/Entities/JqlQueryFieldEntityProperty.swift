// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an entity property.
public struct JqlQueryFieldEntityProperty: Codable {
    /// The object on which the property is set.
    ///
    /// Example: "issue"
    public var entity: String
    /// The key of the property.
    ///
    /// Example: "stats"
    public var key: String
    /// The path in the property value to query.
    ///
    /// Example: "comments.count"
    public var path: String
    /// The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
    ///
    /// Example: "number"
    public var type: `Type`?

    /// The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
    ///
    /// Example: "number"
    public enum `Type`: String, Codable, CaseIterable {
        case number
        case string
        case text
        case date
        case user
    }

    public init(entity: String, key: String, path: String, type: `Type`? = nil) {
        self.entity = entity
        self.key = key
        self.path = path
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.entity = try values.decode(String.self, forKey: "entity")
        self.key = try values.decode(String.self, forKey: "key")
        self.path = try values.decode(String.self, forKey: "path")
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(entity, forKey: "entity")
        try values.encode(key, forKey: "key")
        try values.encode(path, forKey: "path")
        try values.encodeIfPresent(type, forKey: "type")
    }
}
