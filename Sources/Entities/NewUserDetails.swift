// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The user details.
public struct NewUserDetails: Codable {
    /// The URL of the user.
    public var this: String?
    /// This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    public var key: String?
    /// This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    public var name: String?
    /// This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
    public var password: String?
    /// The email address for the user.
    public var emailAddress: String
    /// This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
    public var displayName: String?
    /// Deprecated, do not use.
    public var applicationKeys: [String]?

    public init(this: String? = nil, key: String? = nil, name: String? = nil, password: String? = nil, emailAddress: String, displayName: String? = nil, applicationKeys: [String]? = nil) {
        self.this = this
        self.key = key
        self.name = name
        self.password = password
        self.emailAddress = emailAddress
        self.displayName = displayName
        self.applicationKeys = applicationKeys
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.this = try values.decodeIfPresent(String.self, forKey: "self")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.password = try values.decodeIfPresent(String.self, forKey: "password")
        self.emailAddress = try values.decode(String.self, forKey: "emailAddress")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
        self.applicationKeys = try values.decodeIfPresent([String].self, forKey: "applicationKeys")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(password, forKey: "password")
        try values.encode(emailAddress, forKey: "emailAddress")
        try values.encodeIfPresent(displayName, forKey: "displayName")
        try values.encodeIfPresent(applicationKeys, forKey: "applicationKeys")
    }
}
