// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a notification.
public struct Notification: Codable {
    /// The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
    public var subject: String?
    /// The plain text body of the email notification for the issue.
    public var textBody: String?
    /// The HTML body of the email notification for the issue.
    public var htmlBody: String?
    /// The recipients of the email notification for the issue.
    public var to: NotificationRecipients?
    /// Restricts the notifications to users with the specified permissions.
    public var restrict: NotificationRecipientsRestrictions?

    public init(subject: String? = nil, textBody: String? = nil, htmlBody: String? = nil, to: NotificationRecipients? = nil, restrict: NotificationRecipientsRestrictions? = nil) {
        self.subject = subject
        self.textBody = textBody
        self.htmlBody = htmlBody
        self.to = to
        self.restrict = restrict
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.subject = try values.decodeIfPresent(String.self, forKey: "subject")
        self.textBody = try values.decodeIfPresent(String.self, forKey: "textBody")
        self.htmlBody = try values.decodeIfPresent(String.self, forKey: "htmlBody")
        self.to = try values.decodeIfPresent(NotificationRecipients.self, forKey: "to")
        self.restrict = try values.decodeIfPresent(NotificationRecipientsRestrictions.self, forKey: "restrict")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(subject, forKey: "subject")
        try values.encodeIfPresent(textBody, forKey: "textBody")
        try values.encodeIfPresent(htmlBody, forKey: "htmlBody")
        try values.encodeIfPresent(to, forKey: "to")
        try values.encodeIfPresent(restrict, forKey: "restrict")
    }
}
