// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a notification scheme.
public struct NotificationScheme: Codable {
    /// Expand options that include additional notification scheme details in the response.
    public var expand: String?
    /// The ID of the notification scheme.
    public var id: Int64?
    public var this: String?
    /// The name of the notification scheme.
    public var name: String?
    /// The description of the notification scheme.
    public var description: String?
    /// The notification events and associated recipients.
    public var notificationSchemeEvents: [NotificationSchemeEvent]?
    /// The scope of the notification scheme.
    public var scope: Scope?

    public init(expand: String? = nil, id: Int64? = nil, this: String? = nil, name: String? = nil, description: String? = nil, notificationSchemeEvents: [NotificationSchemeEvent]? = nil, scope: Scope? = nil) {
        self.expand = expand
        self.id = id
        self.this = this
        self.name = name
        self.description = description
        self.notificationSchemeEvents = notificationSchemeEvents
        self.scope = scope
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.id = try values.decodeIfPresent(Int64.self, forKey: "id")
        self.this = try values.decodeIfPresent(String.self, forKey: "self")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.notificationSchemeEvents = try values.decodeIfPresent([NotificationSchemeEvent].self, forKey: "notificationSchemeEvents")
        self.scope = try values.decodeIfPresent(Scope.self, forKey: "scope")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(notificationSchemeEvents, forKey: "notificationSchemeEvents")
        try values.encodeIfPresent(scope, forKey: "scope")
    }
}
