// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// An ordered list of issue type IDs and information about where to move them.
public struct OrderOfIssueTypes: Codable {
    /// A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
    public var issueTypeIDs: [String]
    /// The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
    public var after: String?
    /// The position the issue types should be moved to. Required if `after` isn't provided.
    public var position: Position?

    /// The position the issue types should be moved to. Required if `after` isn't provided.
    public enum Position: String, Codable, CaseIterable {
        case first = "First"
        case last = "Last"
    }

    public init(issueTypeIDs: [String], after: String? = nil, position: Position? = nil) {
        self.issueTypeIDs = issueTypeIDs
        self.after = after
        self.position = position
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.issueTypeIDs = try values.decode([String].self, forKey: "issueTypeIds")
        self.after = try values.decodeIfPresent(String.self, forKey: "after")
        self.position = try values.decodeIfPresent(Position.self, forKey: "position")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(issueTypeIDs, forKey: "issueTypeIds")
        try values.encodeIfPresent(after, forKey: "after")
        try values.encodeIfPresent(position, forKey: "position")
    }
}
