// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PageOfStatuses: Codable {
    /// The index of the first item returned on the page.
    public var startAt: Int?
    /// Number of items that satisfy the search.
    public var total: Int?
    /// Whether this is the last page.
    public var isLast: Bool?
    /// The maximum number of items that could be returned.
    public var maxResults: Int?
    /// The list of items.
    public var values: [JiraStatus]?
    /// The URL of this page.
    public var this: String?
    /// The URL of the next page of results, if any.
    public var nextPage: String?

    public init(startAt: Int? = nil, total: Int? = nil, isLast: Bool? = nil, maxResults: Int? = nil, values: [JiraStatus]? = nil, this: String? = nil, nextPage: String? = nil) {
        self.startAt = startAt
        self.total = total
        self.isLast = isLast
        self.maxResults = maxResults
        self.values = values
        self.this = this
        self.nextPage = nextPage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.startAt = try values.decodeIfPresent(Int.self, forKey: "startAt")
        self.total = try values.decodeIfPresent(Int.self, forKey: "total")
        self.isLast = try values.decodeIfPresent(Bool.self, forKey: "isLast")
        self.maxResults = try values.decodeIfPresent(Int.self, forKey: "maxResults")
        self.values = try values.decodeIfPresent([JiraStatus].self, forKey: "values")
        self.this = try values.decodeIfPresent(String.self, forKey: "self")
        self.nextPage = try values.decodeIfPresent(String.self, forKey: "nextPage")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(startAt, forKey: "startAt")
        try values.encodeIfPresent(total, forKey: "total")
        try values.encodeIfPresent(isLast, forKey: "isLast")
        try values.encodeIfPresent(maxResults, forKey: "maxResults")
        try values.encodeIfPresent(self.values, forKey: "values")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(nextPage, forKey: "nextPage")
    }
}
