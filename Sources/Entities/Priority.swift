// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// An issue priority.
public struct Priority: Codable {
    /// The URL of the issue priority.
    public var this: String?
    /// The color used to indicate the issue priority.
    public var statusColor: String?
    /// The description of the issue priority.
    public var description: String?
    /// The URL of the icon for the issue priority.
    public var iconURL: String?
    /// The name of the issue priority.
    public var name: String?
    /// The ID of the issue priority.
    public var id: String?
    /// Whether this priority is the default.
    public var isDefault: Bool?

    public init(this: String? = nil, statusColor: String? = nil, description: String? = nil, iconURL: String? = nil, name: String? = nil, id: String? = nil, isDefault: Bool? = nil) {
        self.this = this
        self.statusColor = statusColor
        self.description = description
        self.iconURL = iconURL
        self.name = name
        self.id = id
        self.isDefault = isDefault
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.this = try values.decodeIfPresent(String.self, forKey: "self")
        self.statusColor = try values.decodeIfPresent(String.self, forKey: "statusColor")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.iconURL = try values.decodeIfPresent(String.self, forKey: "iconUrl")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.isDefault = try values.decodeIfPresent(Bool.self, forKey: "isDefault")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(statusColor, forKey: "statusColor")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(iconURL, forKey: "iconUrl")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(isDefault, forKey: "isDefault")
    }
}
