// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a project.
public struct Project: Codable {
    /// Expand options that include additional project details in the response.
    public var expand: String?
    /// The URL of the project details.
    public var this: URL?
    /// The ID of the project.
    public var id: String?
    /// The key of the project.
    public var key: String?
    /// A brief description of the project.
    public var description: String?
    /// The username of the project lead.
    public var lead: User?
    /// List of the components contained in the project.
    public var components: [ProjectComponent]?
    /// List of the issue types available in the project.
    public var issueTypes: [IssueTypeDetails]?
    /// A link to information about this project, such as project documentation.
    public var url: String?
    /// An email address associated with the project.
    public var email: String?
    /// The default assignee when creating issues for this project.
    public var assigneeType: AssigneeType?
    /// The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
    public var versions: [Version]?
    /// The name of the project.
    public var name: String?
    /// The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
    public var roles: [String: URL]?
    /// The URLs of the project's avatars.
    public var avatarURLs: AvatarURLsBean?
    /// The category the project belongs to.
    public var projectCategory: ProjectCategory?
    /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    public var projectTypeKey: ProjectTypeKey?
    /// Whether the project is simplified.
    public var isSimplified: Bool?
    /// The type of the project.
    public var style: Style?
    /// Whether the project is selected as a favorite.
    public var isFavourite: Bool?
    /// Whether the project is private.
    public var isPrivate: Bool?
    /// The issue type hierarchy for the project.
    public var issueTypeHierarchy: Hierarchy?
    /// User permissions on the project
    public var permissions: ProjectPermissions?
    /// Map of project properties
    public var properties: [String: AnyJSON]?
    /// Unique ID for next-gen projects.
    public var uuid: UUID?
    /// Insights about the project.
    public var insight: ProjectInsight?
    /// Whether the project is marked as deleted.
    public var isDeleted: Bool?
    /// The date when the project is deleted permanently.
    public var retentionTillDate: Date?
    /// The date when the project was marked as deleted.
    public var deletedDate: Date?
    /// The user who marked the project as deleted.
    public var deletedBy: User?
    /// Whether the project is archived.
    public var isArchived: Bool?
    /// The date when the project was archived.
    public var archivedDate: Date?
    /// The user who archived the project.
    public var archivedBy: User?
    /// The project landing page info.
    public var landingPageInfo: ProjectLandingPageInfo?

    /// The default assignee when creating issues for this project.
    public enum AssigneeType: String, Codable, CaseIterable {
        case projectLead = "PROJECT_LEAD"
        case unassigned = "UNASSIGNED"
    }

    /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    public enum ProjectTypeKey: String, Codable, CaseIterable {
        case software
        case serviceDesk = "service_desk"
        case business
    }

    /// The type of the project.
    public enum Style: String, Codable, CaseIterable {
        case classic
        case nextGen = "next-gen"
    }

    public init(expand: String? = nil, this: URL? = nil, id: String? = nil, key: String? = nil, description: String? = nil, lead: User? = nil, components: [ProjectComponent]? = nil, issueTypes: [IssueTypeDetails]? = nil, url: String? = nil, email: String? = nil, assigneeType: AssigneeType? = nil, versions: [Version]? = nil, name: String? = nil, roles: [String: URL]? = nil, avatarURLs: AvatarURLsBean? = nil, projectCategory: ProjectCategory? = nil, projectTypeKey: ProjectTypeKey? = nil, isSimplified: Bool? = nil, style: Style? = nil, isFavourite: Bool? = nil, isPrivate: Bool? = nil, issueTypeHierarchy: Hierarchy? = nil, permissions: ProjectPermissions? = nil, properties: [String: AnyJSON]? = nil, uuid: UUID? = nil, insight: ProjectInsight? = nil, isDeleted: Bool? = nil, retentionTillDate: Date? = nil, deletedDate: Date? = nil, deletedBy: User? = nil, isArchived: Bool? = nil, archivedDate: Date? = nil, archivedBy: User? = nil, landingPageInfo: ProjectLandingPageInfo? = nil) {
        self.expand = expand
        self.this = this
        self.id = id
        self.key = key
        self.description = description
        self.lead = lead
        self.components = components
        self.issueTypes = issueTypes
        self.url = url
        self.email = email
        self.assigneeType = assigneeType
        self.versions = versions
        self.name = name
        self.roles = roles
        self.avatarURLs = avatarURLs
        self.projectCategory = projectCategory
        self.projectTypeKey = projectTypeKey
        self.isSimplified = isSimplified
        self.style = style
        self.isFavourite = isFavourite
        self.isPrivate = isPrivate
        self.issueTypeHierarchy = issueTypeHierarchy
        self.permissions = permissions
        self.properties = properties
        self.uuid = uuid
        self.insight = insight
        self.isDeleted = isDeleted
        self.retentionTillDate = retentionTillDate
        self.deletedDate = deletedDate
        self.deletedBy = deletedBy
        self.isArchived = isArchived
        self.archivedDate = archivedDate
        self.archivedBy = archivedBy
        self.landingPageInfo = landingPageInfo
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.lead = try values.decodeIfPresent(User.self, forKey: "lead")
        self.components = try values.decodeIfPresent([ProjectComponent].self, forKey: "components")
        self.issueTypes = try values.decodeIfPresent([IssueTypeDetails].self, forKey: "issueTypes")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.assigneeType = try values.decodeIfPresent(AssigneeType.self, forKey: "assigneeType")
        self.versions = try values.decodeIfPresent([Version].self, forKey: "versions")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.roles = try values.decodeIfPresent([String: URL].self, forKey: "roles")
        self.avatarURLs = try values.decodeIfPresent(AvatarURLsBean.self, forKey: "avatarUrls")
        self.projectCategory = try values.decodeIfPresent(ProjectCategory.self, forKey: "projectCategory")
        self.projectTypeKey = try values.decodeIfPresent(ProjectTypeKey.self, forKey: "projectTypeKey")
        self.isSimplified = try values.decodeIfPresent(Bool.self, forKey: "simplified")
        self.style = try values.decodeIfPresent(Style.self, forKey: "style")
        self.isFavourite = try values.decodeIfPresent(Bool.self, forKey: "favourite")
        self.isPrivate = try values.decodeIfPresent(Bool.self, forKey: "isPrivate")
        self.issueTypeHierarchy = try values.decodeIfPresent(Hierarchy.self, forKey: "issueTypeHierarchy")
        self.permissions = try values.decodeIfPresent(ProjectPermissions.self, forKey: "permissions")
        self.properties = try values.decodeIfPresent([String: AnyJSON].self, forKey: "properties")
        self.uuid = try values.decodeIfPresent(UUID.self, forKey: "uuid")
        self.insight = try values.decodeIfPresent(ProjectInsight.self, forKey: "insight")
        self.isDeleted = try values.decodeIfPresent(Bool.self, forKey: "deleted")
        self.retentionTillDate = try values.decodeIfPresent(Date.self, forKey: "retentionTillDate")
        self.deletedDate = try values.decodeIfPresent(Date.self, forKey: "deletedDate")
        self.deletedBy = try values.decodeIfPresent(User.self, forKey: "deletedBy")
        self.isArchived = try values.decodeIfPresent(Bool.self, forKey: "archived")
        self.archivedDate = try values.decodeIfPresent(Date.self, forKey: "archivedDate")
        self.archivedBy = try values.decodeIfPresent(User.self, forKey: "archivedBy")
        self.landingPageInfo = try values.decodeIfPresent(ProjectLandingPageInfo.self, forKey: "landingPageInfo")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(lead, forKey: "lead")
        try values.encodeIfPresent(components, forKey: "components")
        try values.encodeIfPresent(issueTypes, forKey: "issueTypes")
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(assigneeType, forKey: "assigneeType")
        try values.encodeIfPresent(versions, forKey: "versions")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(roles, forKey: "roles")
        try values.encodeIfPresent(avatarURLs, forKey: "avatarUrls")
        try values.encodeIfPresent(projectCategory, forKey: "projectCategory")
        try values.encodeIfPresent(projectTypeKey, forKey: "projectTypeKey")
        try values.encodeIfPresent(isSimplified, forKey: "simplified")
        try values.encodeIfPresent(style, forKey: "style")
        try values.encodeIfPresent(isFavourite, forKey: "favourite")
        try values.encodeIfPresent(isPrivate, forKey: "isPrivate")
        try values.encodeIfPresent(issueTypeHierarchy, forKey: "issueTypeHierarchy")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encodeIfPresent(properties, forKey: "properties")
        try values.encodeIfPresent(uuid, forKey: "uuid")
        try values.encodeIfPresent(insight, forKey: "insight")
        try values.encodeIfPresent(isDeleted, forKey: "deleted")
        try values.encodeIfPresent(retentionTillDate, forKey: "retentionTillDate")
        try values.encodeIfPresent(deletedDate, forKey: "deletedDate")
        try values.encodeIfPresent(deletedBy, forKey: "deletedBy")
        try values.encodeIfPresent(isArchived, forKey: "archived")
        try values.encodeIfPresent(archivedDate, forKey: "archivedDate")
        try values.encodeIfPresent(archivedBy, forKey: "archivedBy")
        try values.encodeIfPresent(landingPageInfo, forKey: "landingPageInfo")
    }
}
