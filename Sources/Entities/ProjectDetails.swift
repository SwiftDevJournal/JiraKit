// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a project.
public struct ProjectDetails: Codable {
    /// The URL of the project details.
    public var this: String?
    /// The ID of the project.
    public var id: String?
    /// The key of the project.
    public var key: String?
    /// The name of the project.
    public var name: String?
    /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    public var projectTypeKey: ProjectTypeKey?
    /// Whether or not the project is simplified.
    public var isSimplified: Bool?
    /// The URLs of the project's avatars.
    public var avatarURLs: AvatarURLsBean?
    /// The category the project belongs to.
    public var projectCategory: UpdatedProjectCategory?

    /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    public enum ProjectTypeKey: String, Codable, CaseIterable {
        case software
        case serviceDesk = "service_desk"
        case business
    }

    public init(this: String? = nil, id: String? = nil, key: String? = nil, name: String? = nil, projectTypeKey: ProjectTypeKey? = nil, isSimplified: Bool? = nil, avatarURLs: AvatarURLsBean? = nil, projectCategory: UpdatedProjectCategory? = nil) {
        self.this = this
        self.id = id
        self.key = key
        self.name = name
        self.projectTypeKey = projectTypeKey
        self.isSimplified = isSimplified
        self.avatarURLs = avatarURLs
        self.projectCategory = projectCategory
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.this = try values.decodeIfPresent(String.self, forKey: "self")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.projectTypeKey = try values.decodeIfPresent(ProjectTypeKey.self, forKey: "projectTypeKey")
        self.isSimplified = try values.decodeIfPresent(Bool.self, forKey: "simplified")
        self.avatarURLs = try values.decodeIfPresent(AvatarURLsBean.self, forKey: "avatarUrls")
        self.projectCategory = try values.decodeIfPresent(UpdatedProjectCategory.self, forKey: "projectCategory")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(projectTypeKey, forKey: "projectTypeKey")
        try values.encodeIfPresent(isSimplified, forKey: "simplified")
        try values.encodeIfPresent(avatarURLs, forKey: "avatarUrls")
        try values.encodeIfPresent(projectCategory, forKey: "projectCategory")
    }
}
