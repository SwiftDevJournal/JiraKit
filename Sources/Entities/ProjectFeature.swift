// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of a project feature.
public struct ProjectFeature: Codable {
    /// The ID of the project.
    public var projectID: Int64?
    /// The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
    public var state: State?
    /// Whether the state of the feature can be updated.
    public var isToggleLocked: Bool?
    /// The key of the feature.
    public var feature: String?
    /// List of keys of the features required to enable the feature.
    public var prerequisites: [String]?
    /// Localized display name for the feature.
    public var localisedName: String?
    /// Localized display description for the feature.
    public var localisedDescription: String?
    /// URI for the image representing the feature.
    public var imageUri: String?

    /// The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
    public enum State: String, Codable, CaseIterable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        case comingSoon = "COMING_SOON"
    }

    public init(projectID: Int64? = nil, state: State? = nil, isToggleLocked: Bool? = nil, feature: String? = nil, prerequisites: [String]? = nil, localisedName: String? = nil, localisedDescription: String? = nil, imageUri: String? = nil) {
        self.projectID = projectID
        self.state = state
        self.isToggleLocked = isToggleLocked
        self.feature = feature
        self.prerequisites = prerequisites
        self.localisedName = localisedName
        self.localisedDescription = localisedDescription
        self.imageUri = imageUri
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.projectID = try values.decodeIfPresent(Int64.self, forKey: "projectId")
        self.state = try values.decodeIfPresent(State.self, forKey: "state")
        self.isToggleLocked = try values.decodeIfPresent(Bool.self, forKey: "toggleLocked")
        self.feature = try values.decodeIfPresent(String.self, forKey: "feature")
        self.prerequisites = try values.decodeIfPresent([String].self, forKey: "prerequisites")
        self.localisedName = try values.decodeIfPresent(String.self, forKey: "localisedName")
        self.localisedDescription = try values.decodeIfPresent(String.self, forKey: "localisedDescription")
        self.imageUri = try values.decodeIfPresent(String.self, forKey: "imageUri")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(projectID, forKey: "projectId")
        try values.encodeIfPresent(state, forKey: "state")
        try values.encodeIfPresent(isToggleLocked, forKey: "toggleLocked")
        try values.encodeIfPresent(feature, forKey: "feature")
        try values.encodeIfPresent(prerequisites, forKey: "prerequisites")
        try values.encodeIfPresent(localisedName, forKey: "localisedName")
        try values.encodeIfPresent(localisedDescription, forKey: "localisedDescription")
        try values.encodeIfPresent(imageUri, forKey: "imageUri")
    }
}
