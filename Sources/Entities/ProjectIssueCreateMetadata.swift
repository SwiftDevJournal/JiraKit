// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of the issue creation metadata for a project.
public struct ProjectIssueCreateMetadata: Codable {
    /// Expand options that include additional project issue create metadata details in the response.
    public var expand: String?
    /// The URL of the project.
    public var this: String?
    /// The ID of the project.
    public var id: String?
    /// The key of the project.
    public var key: String?
    /// The name of the project.
    public var name: String?
    /// List of the project's avatars, returning the avatar size and associated URL.
    public var avatarURLs: AvatarURLsBean?
    /// List of the issue types supported by the project.
    public var issuetypes: [IssueTypeIssueCreateMetadata]?

    public init(expand: String? = nil, this: String? = nil, id: String? = nil, key: String? = nil, name: String? = nil, avatarURLs: AvatarURLsBean? = nil, issuetypes: [IssueTypeIssueCreateMetadata]? = nil) {
        self.expand = expand
        self.this = this
        self.id = id
        self.key = key
        self.name = name
        self.avatarURLs = avatarURLs
        self.issuetypes = issuetypes
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.this = try values.decodeIfPresent(String.self, forKey: "self")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.avatarURLs = try values.decodeIfPresent(AvatarURLsBean.self, forKey: "avatarUrls")
        self.issuetypes = try values.decodeIfPresent([IssueTypeIssueCreateMetadata].self, forKey: "issuetypes")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(avatarURLs, forKey: "avatarUrls")
        try values.encodeIfPresent(issuetypes, forKey: "issuetypes")
    }
}
