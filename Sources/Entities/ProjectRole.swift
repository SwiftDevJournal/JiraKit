// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about the roles in a project.
public struct ProjectRole: Codable {
    /// The URL the project role details.
    public var this: URL?
    /// The name of the project role.
    public var name: String?
    /// The ID of the project role.
    public var id: Int64?
    /// The description of the project role.
    public var description: String?
    /// The list of users who act in this role.
    public var actors: [RoleActor]?
    /// The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
    public var scope: Scope?
    /// The translated name of the project role.
    public var translatedName: String?
    /// Whether the calling user is part of this role.
    public var isCurrentUserRole: Bool?
    /// Whether this role is the admin role for the project.
    public var isAdmin: Bool?
    /// Whether the roles are configurable for this project.
    public var isRoleConfigurable: Bool?
    /// Whether this role is the default role for the project
    public var isDefault: Bool?

    public init(this: URL? = nil, name: String? = nil, id: Int64? = nil, description: String? = nil, actors: [RoleActor]? = nil, scope: Scope? = nil, translatedName: String? = nil, isCurrentUserRole: Bool? = nil, isAdmin: Bool? = nil, isRoleConfigurable: Bool? = nil, isDefault: Bool? = nil) {
        self.this = this
        self.name = name
        self.id = id
        self.description = description
        self.actors = actors
        self.scope = scope
        self.translatedName = translatedName
        self.isCurrentUserRole = isCurrentUserRole
        self.isAdmin = isAdmin
        self.isRoleConfigurable = isRoleConfigurable
        self.isDefault = isDefault
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.id = try values.decodeIfPresent(Int64.self, forKey: "id")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.actors = try values.decodeIfPresent([RoleActor].self, forKey: "actors")
        self.scope = try values.decodeIfPresent(Scope.self, forKey: "scope")
        self.translatedName = try values.decodeIfPresent(String.self, forKey: "translatedName")
        self.isCurrentUserRole = try values.decodeIfPresent(Bool.self, forKey: "currentUserRole")
        self.isAdmin = try values.decodeIfPresent(Bool.self, forKey: "admin")
        self.isRoleConfigurable = try values.decodeIfPresent(Bool.self, forKey: "roleConfigurable")
        self.isDefault = try values.decodeIfPresent(Bool.self, forKey: "default")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(actors, forKey: "actors")
        try values.encodeIfPresent(scope, forKey: "scope")
        try values.encodeIfPresent(translatedName, forKey: "translatedName")
        try values.encodeIfPresent(isCurrentUserRole, forKey: "currentUserRole")
        try values.encodeIfPresent(isAdmin, forKey: "admin")
        try values.encodeIfPresent(isRoleConfigurable, forKey: "roleConfigurable")
        try values.encodeIfPresent(isDefault, forKey: "default")
    }
}
