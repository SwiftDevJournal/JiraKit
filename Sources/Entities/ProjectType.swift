// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a project type.
public struct ProjectType: Codable {
    /// The key of the project type.
    public var key: String?
    /// The formatted key of the project type.
    public var formattedKey: String?
    /// The key of the project type's description.
    public var descriptionI18nKey: String?
    /// The icon of the project type.
    public var icon: String?
    /// The color of the project type.
    public var color: String?

    public init(key: String? = nil, formattedKey: String? = nil, descriptionI18nKey: String? = nil, icon: String? = nil, color: String? = nil) {
        self.key = key
        self.formattedKey = formattedKey
        self.descriptionI18nKey = descriptionI18nKey
        self.icon = icon
        self.color = color
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.formattedKey = try values.decodeIfPresent(String.self, forKey: "formattedKey")
        self.descriptionI18nKey = try values.decodeIfPresent(String.self, forKey: "descriptionI18nKey")
        self.icon = try values.decodeIfPresent(String.self, forKey: "icon")
        self.color = try values.decodeIfPresent(String.self, forKey: "color")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(formattedKey, forKey: "formattedKey")
        try values.encodeIfPresent(descriptionI18nKey, forKey: "descriptionI18nKey")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(color, forKey: "color")
    }
}
