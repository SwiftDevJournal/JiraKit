// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an issue remote link.
public struct RemoteIssueLink: Codable {
    /// The ID of the link.
    public var id: Int64?
    /// The URL of the link.
    public var this: URL?
    /// The global ID of the link, such as the ID of the item on the remote system.
    public var globalID: String?
    /// Details of the remote application the linked item is in.
    public var application: Application?
    /// Description of the relationship between the issue and the linked item.
    public var relationship: String?
    /// Details of the item linked to.
    public var object: RemoteObject?

    public init(id: Int64? = nil, this: URL? = nil, globalID: String? = nil, application: Application? = nil, relationship: String? = nil, object: RemoteObject? = nil) {
        self.id = id
        self.this = this
        self.globalID = globalID
        self.application = application
        self.relationship = relationship
        self.object = object
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Int64.self, forKey: "id")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.globalID = try values.decodeIfPresent(String.self, forKey: "globalId")
        self.application = try values.decodeIfPresent(Application.self, forKey: "application")
        self.relationship = try values.decodeIfPresent(String.self, forKey: "relationship")
        self.object = try values.decodeIfPresent(RemoteObject.self, forKey: "object")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(globalID, forKey: "globalId")
        try values.encodeIfPresent(application, forKey: "application")
        try values.encodeIfPresent(relationship, forKey: "relationship")
        try values.encodeIfPresent(object, forKey: "object")
    }
}
