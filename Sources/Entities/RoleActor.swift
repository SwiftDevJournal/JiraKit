// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a user assigned to a project role.
public struct RoleActor: Codable {
    /// The ID of the role actor.
    public var id: Int?
    /// The display name of the role actor. For users, depending on the userâ€™s privacy setting, this may return an alternative value for the user's name.
    public var displayName: String?
    /// The type of role actor.
    public var type: `Type`?
    /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    public var name: String?
    /// The avatar of the role actor.
    public var avatarURL: URL?
    public var actorUser: ProjectRoleUser?
    public var actorGroup: ProjectRoleGroup?

    /// The type of role actor.
    public enum `Type`: String, Codable, CaseIterable {
        case atlassianGroupRoleActor = "atlassian-group-role-actor"
        case atlassianUserRoleActor = "atlassian-user-role-actor"
    }

    public init(id: Int? = nil, displayName: String? = nil, type: `Type`? = nil, name: String? = nil, avatarURL: URL? = nil, actorUser: ProjectRoleUser? = nil, actorGroup: ProjectRoleGroup? = nil) {
        self.id = id
        self.displayName = displayName
        self.type = type
        self.name = name
        self.avatarURL = avatarURL
        self.actorUser = actorUser
        self.actorGroup = actorGroup
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Int.self, forKey: "id")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.avatarURL = try values.decodeIfPresent(URL.self, forKey: "avatarUrl")
        self.actorUser = try values.decodeIfPresent(ProjectRoleUser.self, forKey: "actorUser")
        self.actorGroup = try values.decodeIfPresent(ProjectRoleGroup.self, forKey: "actorGroup")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(displayName, forKey: "displayName")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(avatarURL, forKey: "avatarUrl")
        try values.encodeIfPresent(actorUser, forKey: "actorUser")
        try values.encodeIfPresent(actorGroup, forKey: "actorGroup")
    }
}
