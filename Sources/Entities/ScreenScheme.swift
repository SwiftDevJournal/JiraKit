// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A screen scheme.
public struct ScreenScheme: Codable {
    /// The ID of the screen scheme.
    public var id: Int64?
    /// The name of the screen scheme.
    public var name: String?
    /// The description of the screen scheme.
    public var description: String?
    /// The IDs of the screens for the screen types of the screen scheme.
    public var screens: ScreenTypes?
    /// Details of the issue type screen schemes associated with the screen scheme.
    public var issueTypeScreenSchemes: PageBeanIssueTypeScreenScheme?

    public init(id: Int64? = nil, name: String? = nil, description: String? = nil, screens: ScreenTypes? = nil, issueTypeScreenSchemes: PageBeanIssueTypeScreenScheme? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.screens = screens
        self.issueTypeScreenSchemes = issueTypeScreenSchemes
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Int64.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.screens = try values.decodeIfPresent(ScreenTypes.self, forKey: "screens")
        self.issueTypeScreenSchemes = try values.decodeIfPresent(PageBeanIssueTypeScreenScheme.self, forKey: "issueTypeScreenSchemes")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(screens, forKey: "screens")
        try values.encodeIfPresent(issueTypeScreenSchemes, forKey: "issueTypeScreenSchemes")
    }
}
