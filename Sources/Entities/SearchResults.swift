// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The result of a JQL search.
public struct SearchResults: Codable {
    /// Expand options that include additional search result details in the response.
    public var expand: String?
    /// The index of the first item returned on the page.
    public var startAt: Int?
    /// The maximum number of results that could be on the page.
    public var maxResults: Int?
    /// The number of results on the page.
    public var total: Int?
    /// The list of issues found by the search.
    public var issues: [IssueBean]?
    /// Any warnings related to the JQL query.
    public var warningMessages: [String]?
    /// The ID and name of each field in the search results.
    public var names: [String: String]?
    /// The schema describing the field types in the search results.
    public var schema: [String: JSONTypeBean]?

    public init(expand: String? = nil, startAt: Int? = nil, maxResults: Int? = nil, total: Int? = nil, issues: [IssueBean]? = nil, warningMessages: [String]? = nil, names: [String: String]? = nil, schema: [String: JSONTypeBean]? = nil) {
        self.expand = expand
        self.startAt = startAt
        self.maxResults = maxResults
        self.total = total
        self.issues = issues
        self.warningMessages = warningMessages
        self.names = names
        self.schema = schema
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.startAt = try values.decodeIfPresent(Int.self, forKey: "startAt")
        self.maxResults = try values.decodeIfPresent(Int.self, forKey: "maxResults")
        self.total = try values.decodeIfPresent(Int.self, forKey: "total")
        self.issues = try values.decodeIfPresent([IssueBean].self, forKey: "issues")
        self.warningMessages = try values.decodeIfPresent([String].self, forKey: "warningMessages")
        self.names = try values.decodeIfPresent([String: String].self, forKey: "names")
        self.schema = try values.decodeIfPresent([String: JSONTypeBean].self, forKey: "schema")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(startAt, forKey: "startAt")
        try values.encodeIfPresent(maxResults, forKey: "maxResults")
        try values.encodeIfPresent(total, forKey: "total")
        try values.encodeIfPresent(issues, forKey: "issues")
        try values.encodeIfPresent(warningMessages, forKey: "warningMessages")
        try values.encodeIfPresent(names, forKey: "names")
        try values.encodeIfPresent(schema, forKey: "schema")
    }
}
