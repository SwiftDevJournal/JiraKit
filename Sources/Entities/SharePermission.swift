// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of a share permission for the filter.
public struct SharePermission: Codable {
    /// The unique identifier of the share permission.
    public var id: Int?
    /// The type of share permission:
    /// 
    ///  *  `user` Shared with a user.
    ///  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
    ///  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
    ///  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
    ///  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
    ///  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
    ///  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
    public var type: `Type`
    /// The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.  
    /// For a request, specify the `id` for the project.
    public var project: Project?
    /// The project role that the filter is shared with.  
    /// For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
    public var role: ProjectRole?
    /// The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended.
    public var group: GroupName?
    /// The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
    public var user: UserBean?

    /// The type of share permission:
    /// 
    ///  *  `user` Shared with a user.
    ///  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
    ///  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
    ///  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
    ///  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
    ///  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
    ///  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
    public enum `Type`: String, Codable, CaseIterable {
        case user
        case group
        case project
        case projectRole
        case global
        case loggedin
        case authenticated
        case projectUnknown = "project-unknown"
    }

    public init(id: Int? = nil, type: `Type`, project: Project? = nil, role: ProjectRole? = nil, group: GroupName? = nil, user: UserBean? = nil) {
        self.id = id
        self.type = type
        self.project = project
        self.role = role
        self.group = group
        self.user = user
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Int.self, forKey: "id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.project = try values.decodeIfPresent(Project.self, forKey: "project")
        self.role = try values.decodeIfPresent(ProjectRole.self, forKey: "role")
        self.group = try values.decodeIfPresent(GroupName.self, forKey: "group")
        self.user = try values.decodeIfPresent(UserBean.self, forKey: "user")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(project, forKey: "project")
        try values.encodeIfPresent(role, forKey: "role")
        try values.encodeIfPresent(group, forKey: "group")
        try values.encodeIfPresent(user, forKey: "user")
    }
}
