// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct SimpleErrorCollection: Codable {
    /// The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
    public var errors: [String: String]?
    /// The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
    public var errorMessages: [String]?
    public var httpstatusCode: Int?

    public init(errors: [String: String]? = nil, errorMessages: [String]? = nil, httpstatusCode: Int? = nil) {
        self.errors = errors
        self.errorMessages = errorMessages
        self.httpstatusCode = httpstatusCode
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.errors = try values.decodeIfPresent([String: String].self, forKey: "errors")
        self.errorMessages = try values.decodeIfPresent([String].self, forKey: "errorMessages")
        self.httpstatusCode = try values.decodeIfPresent(Int.self, forKey: "httpStatusCode")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(errors, forKey: "errors")
        try values.encodeIfPresent(errorMessages, forKey: "errorMessages")
        try values.encodeIfPresent(httpstatusCode, forKey: "httpStatusCode")
    }
}
