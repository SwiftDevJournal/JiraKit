// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The details of a UI modification's context, which define where to activate the UI modification.
public struct UiModificationContextDetails: Codable {
    /// The ID of the UI modification context.
    public var id: String?
    /// The project ID of the context.
    public var projectID: String
    /// The issue type ID of the context.
    public var issueTypeID: String
    /// The view type of the context. Only `GIC` (Global Issue Create) is supported.
    public var viewType: String
    /// Whether a context is available. For example, when a project is deleted the context becomes unavailable.
    public var isAvailable: Bool?

    public init(id: String? = nil, projectID: String, issueTypeID: String, viewType: String, isAvailable: Bool? = nil) {
        self.id = id
        self.projectID = projectID
        self.issueTypeID = issueTypeID
        self.viewType = viewType
        self.isAvailable = isAvailable
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.projectID = try values.decode(String.self, forKey: "projectId")
        self.issueTypeID = try values.decode(String.self, forKey: "issueTypeId")
        self.viewType = try values.decode(String.self, forKey: "viewType")
        self.isAvailable = try values.decodeIfPresent(Bool.self, forKey: "isAvailable")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encode(projectID, forKey: "projectId")
        try values.encode(issueTypeID, forKey: "issueTypeId")
        try values.encode(viewType, forKey: "viewType")
        try values.encodeIfPresent(isAvailable, forKey: "isAvailable")
    }
}
