// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The details of a UI modification.
public struct UiModificationDetails: Codable {
    /// The ID of the UI modification.
    public var id: String
    /// The name of the UI modification. The maximum length is 255 characters.
    public var name: String
    /// The description of the UI modification. The maximum length is 255 characters.
    public var description: String?
    /// The URL of the UI modification.
    public var this: String
    /// The data of the UI modification. The maximum size of the data is 50000 characters.
    public var data: String?
    /// List of contexts of the UI modification. The maximum number of contexts is 1000.
    public var contexts: [UiModificationContextDetails]?

    public init(id: String, name: String, description: String? = nil, this: String, data: String? = nil, contexts: [UiModificationContextDetails]? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.this = this
        self.data = data
        self.contexts = contexts
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.this = try values.decode(String.self, forKey: "self")
        self.data = try values.decodeIfPresent(String.self, forKey: "data")
        self.contexts = try values.decodeIfPresent([UiModificationContextDetails].self, forKey: "contexts")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(this, forKey: "self")
        try values.encodeIfPresent(data, forKey: "data")
        try values.encodeIfPresent(contexts, forKey: "contexts")
    }
}
