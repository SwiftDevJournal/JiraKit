// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of an issue priority.
public struct UpdatePriorityDetails: Codable {
    /// The name of the priority. Must be unique.
    public var name: String?
    /// The description of the priority.
    public var description: String?
    /// The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
    public var iconURL: IconURL?
    /// The status color of the priority in 3-digit or 6-digit hexadecimal format.
    public var statusColor: String?

    /// The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
    public enum IconURL: String, Codable, CaseIterable {
        case imagesIconsPrioritiesBlockerPng = "/images/icons/priorities/blocker.png"
        case imagesIconsPrioritiesCriticalPng = "/images/icons/priorities/critical.png"
        case imagesIconsPrioritiesHighPng = "/images/icons/priorities/high.png"
        case imagesIconsPrioritiesHighestPng = "/images/icons/priorities/highest.png"
        case imagesIconsPrioritiesLowPng = "/images/icons/priorities/low.png"
        case imagesIconsPrioritiesLowestPng = "/images/icons/priorities/lowest.png"
        case imagesIconsPrioritiesMajorPng = "/images/icons/priorities/major.png"
        case imagesIconsPrioritiesMediumPng = "/images/icons/priorities/medium.png"
        case imagesIconsPrioritiesMinorPng = "/images/icons/priorities/minor.png"
        case imagesIconsPrioritiesTrivialPng = "/images/icons/priorities/trivial.png"
    }

    public init(name: String? = nil, description: String? = nil, iconURL: IconURL? = nil, statusColor: String? = nil) {
        self.name = name
        self.description = description
        self.iconURL = iconURL
        self.statusColor = statusColor
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.iconURL = try values.decodeIfPresent(IconURL.self, forKey: "iconUrl")
        self.statusColor = try values.decodeIfPresent(String.self, forKey: "statusColor")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(iconURL, forKey: "iconUrl")
        try values.encodeIfPresent(statusColor, forKey: "statusColor")
    }
}
