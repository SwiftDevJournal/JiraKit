// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about the project.
public struct UpdateProjectDetails: Codable {
    /// Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
    public var key: String?
    /// The name of the project.
    public var name: String?
    /// A brief description of the project.
    public var description: String?
    /// This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.
    public var lead: String?
    /// The account ID of the project lead. Cannot be provided with `lead`.
    public var leadAccountID: String?
    /// A link to information about this project, such as project documentation
    public var url: String?
    /// The default assignee when creating issues for this project.
    public var assigneeType: AssigneeType?
    /// An integer value for the project's avatar.
    public var avatarID: Int64?
    /// The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
    public var issueSecurityScheme: Int64?
    /// The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
    public var permissionScheme: Int64?
    /// The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
    public var notificationScheme: Int64?
    /// The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
    public var categoryID: Int64?

    /// The default assignee when creating issues for this project.
    public enum AssigneeType: String, Codable, CaseIterable {
        case projectLead = "PROJECT_LEAD"
        case unassigned = "UNASSIGNED"
    }

    public init(key: String? = nil, name: String? = nil, description: String? = nil, lead: String? = nil, leadAccountID: String? = nil, url: String? = nil, assigneeType: AssigneeType? = nil, avatarID: Int64? = nil, issueSecurityScheme: Int64? = nil, permissionScheme: Int64? = nil, notificationScheme: Int64? = nil, categoryID: Int64? = nil) {
        self.key = key
        self.name = name
        self.description = description
        self.lead = lead
        self.leadAccountID = leadAccountID
        self.url = url
        self.assigneeType = assigneeType
        self.avatarID = avatarID
        self.issueSecurityScheme = issueSecurityScheme
        self.permissionScheme = permissionScheme
        self.notificationScheme = notificationScheme
        self.categoryID = categoryID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.lead = try values.decodeIfPresent(String.self, forKey: "lead")
        self.leadAccountID = try values.decodeIfPresent(String.self, forKey: "leadAccountId")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
        self.assigneeType = try values.decodeIfPresent(AssigneeType.self, forKey: "assigneeType")
        self.avatarID = try values.decodeIfPresent(Int64.self, forKey: "avatarId")
        self.issueSecurityScheme = try values.decodeIfPresent(Int64.self, forKey: "issueSecurityScheme")
        self.permissionScheme = try values.decodeIfPresent(Int64.self, forKey: "permissionScheme")
        self.notificationScheme = try values.decodeIfPresent(Int64.self, forKey: "notificationScheme")
        self.categoryID = try values.decodeIfPresent(Int64.self, forKey: "categoryId")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(lead, forKey: "lead")
        try values.encodeIfPresent(leadAccountID, forKey: "leadAccountId")
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(assigneeType, forKey: "assigneeType")
        try values.encodeIfPresent(avatarID, forKey: "avatarId")
        try values.encodeIfPresent(issueSecurityScheme, forKey: "issueSecurityScheme")
        try values.encodeIfPresent(permissionScheme, forKey: "permissionScheme")
        try values.encodeIfPresent(notificationScheme, forKey: "notificationScheme")
        try values.encodeIfPresent(categoryID, forKey: "categoryId")
    }
}
