// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
/// 
///  *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
///  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
///  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
public struct User: Codable {
    /// The URL of the user.
    public var this: URL?
    /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    public var key: String?
    /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
    public var accountID: String?
    /// The user account type. Can take the following values:
    /// 
    ///  *  `atlassian` regular Atlassian user account
    ///  *  `app` system account used for Connect applications and OAuth to represent external systems
    ///  *  `customer` Jira Service Desk account representing an external service desk
    public var accountType: AccountType?
    /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    public var name: String?
    /// The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
    public var emailAddress: String?
    /// The avatars of the user.
    public var avatarURLs: AvatarURLsBean?
    /// The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
    public var displayName: String?
    /// Whether the user is active.
    public var isActive: Bool?
    /// The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.
    public var timeZone: String?
    /// The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
    public var locale: String?
    /// The groups that the user belongs to.
    public var groups: SimpleListWrapperGroupName?
    /// The application roles the user is assigned to.
    public var applicationRoles: SimpleListWrapperApplicationRole?
    /// Expand options that include additional user details in the response.
    public var expand: String?

    /// The user account type. Can take the following values:
    /// 
    ///  *  `atlassian` regular Atlassian user account
    ///  *  `app` system account used for Connect applications and OAuth to represent external systems
    ///  *  `customer` Jira Service Desk account representing an external service desk
    public enum AccountType: String, Codable, CaseIterable {
        case atlassian
        case app
        case customer
        case unknown
    }

    public init(this: URL? = nil, key: String? = nil, accountID: String? = nil, accountType: AccountType? = nil, name: String? = nil, emailAddress: String? = nil, avatarURLs: AvatarURLsBean? = nil, displayName: String? = nil, isActive: Bool? = nil, timeZone: String? = nil, locale: String? = nil, groups: SimpleListWrapperGroupName? = nil, applicationRoles: SimpleListWrapperApplicationRole? = nil, expand: String? = nil) {
        self.this = this
        self.key = key
        self.accountID = accountID
        self.accountType = accountType
        self.name = name
        self.emailAddress = emailAddress
        self.avatarURLs = avatarURLs
        self.displayName = displayName
        self.isActive = isActive
        self.timeZone = timeZone
        self.locale = locale
        self.groups = groups
        self.applicationRoles = applicationRoles
        self.expand = expand
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.accountID = try values.decodeIfPresent(String.self, forKey: "accountId")
        self.accountType = try values.decodeIfPresent(AccountType.self, forKey: "accountType")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.emailAddress = try values.decodeIfPresent(String.self, forKey: "emailAddress")
        self.avatarURLs = try values.decodeIfPresent(AvatarURLsBean.self, forKey: "avatarUrls")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
        self.isActive = try values.decodeIfPresent(Bool.self, forKey: "active")
        self.timeZone = try values.decodeIfPresent(String.self, forKey: "timeZone")
        self.locale = try values.decodeIfPresent(String.self, forKey: "locale")
        self.groups = try values.decodeIfPresent(SimpleListWrapperGroupName.self, forKey: "groups")
        self.applicationRoles = try values.decodeIfPresent(SimpleListWrapperApplicationRole.self, forKey: "applicationRoles")
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(accountID, forKey: "accountId")
        try values.encodeIfPresent(accountType, forKey: "accountType")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(emailAddress, forKey: "emailAddress")
        try values.encodeIfPresent(avatarURLs, forKey: "avatarUrls")
        try values.encodeIfPresent(displayName, forKey: "displayName")
        try values.encodeIfPresent(isActive, forKey: "active")
        try values.encodeIfPresent(timeZone, forKey: "timeZone")
        try values.encodeIfPresent(locale, forKey: "locale")
        try values.encodeIfPresent(groups, forKey: "groups")
        try values.encodeIfPresent(applicationRoles, forKey: "applicationRoles")
        try values.encodeIfPresent(expand, forKey: "expand")
    }
}
