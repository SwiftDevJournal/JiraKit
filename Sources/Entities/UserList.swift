// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with.
public struct UserList: Codable {
    /// The number of items on the page.
    public var size: Int32?
    /// The list of items.
    public var items: [User]?
    /// The maximum number of results that could be on the page.
    public var maxResults: Int32?
    /// The index of the first item returned on the page.
    public var startIndex: Int32?
    /// The index of the last item returned on the page.
    public var endIndex: Int32?

    public init(size: Int32? = nil, items: [User]? = nil, maxResults: Int32? = nil, startIndex: Int32? = nil, endIndex: Int32? = nil) {
        self.size = size
        self.items = items
        self.maxResults = maxResults
        self.startIndex = startIndex
        self.endIndex = endIndex
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.size = try values.decodeIfPresent(Int32.self, forKey: "size")
        self.items = try values.decodeIfPresent([User].self, forKey: "items")
        self.maxResults = try values.decodeIfPresent(Int32.self, forKey: "max-results")
        self.startIndex = try values.decodeIfPresent(Int32.self, forKey: "start-index")
        self.endIndex = try values.decodeIfPresent(Int32.self, forKey: "end-index")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(size, forKey: "size")
        try values.encodeIfPresent(items, forKey: "items")
        try values.encodeIfPresent(maxResults, forKey: "max-results")
        try values.encodeIfPresent(startIndex, forKey: "start-index")
        try values.encodeIfPresent(endIndex, forKey: "end-index")
    }
}
