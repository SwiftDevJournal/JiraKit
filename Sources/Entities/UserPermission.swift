// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details of a permission and its availability to a user.
public struct UserPermission: Codable {
    /// The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
    public var id: String?
    /// The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
    public var key: String?
    /// The name of the permission.
    public var name: String?
    /// The type of the permission.
    public var type: `Type`?
    /// The description of the permission.
    public var description: String?
    /// Whether the permission is available to the user in the queried context.
    public var havePermission: Bool?
    /// Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`
    public var isDeprecatedKey: Bool?

    /// The type of the permission.
    public enum `Type`: String, Codable, CaseIterable {
        case global = "GLOBAL"
        case project = "PROJECT"
    }

    public init(id: String? = nil, key: String? = nil, name: String? = nil, type: `Type`? = nil, description: String? = nil, havePermission: Bool? = nil, isDeprecatedKey: Bool? = nil) {
        self.id = id
        self.key = key
        self.name = name
        self.type = type
        self.description = description
        self.havePermission = havePermission
        self.isDeprecatedKey = isDeprecatedKey
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.havePermission = try values.decodeIfPresent(Bool.self, forKey: "havePermission")
        self.isDeprecatedKey = try values.decodeIfPresent(Bool.self, forKey: "deprecatedKey")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(havePermission, forKey: "havePermission")
        try values.encodeIfPresent(isDeprecatedKey, forKey: "deprecatedKey")
    }
}
