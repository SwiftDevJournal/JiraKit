// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A user found in a search.
public struct UserPickerUser: Codable {
    /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    public var accountID: String?
    /// This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    public var name: String?
    /// This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    public var key: String?
    /// The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.
    public var html: String?
    /// The display name of the user. Depending on the userâ€™s privacy setting, this may be returned as null.
    public var displayName: String?
    /// The avatar URL of the user.
    public var avatarURL: URL?

    public init(accountID: String? = nil, name: String? = nil, key: String? = nil, html: String? = nil, displayName: String? = nil, avatarURL: URL? = nil) {
        self.accountID = accountID
        self.name = name
        self.key = key
        self.html = html
        self.displayName = displayName
        self.avatarURL = avatarURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.accountID = try values.decodeIfPresent(String.self, forKey: "accountId")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.html = try values.decodeIfPresent(String.self, forKey: "html")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
        self.avatarURL = try values.decodeIfPresent(URL.self, forKey: "avatarUrl")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(accountID, forKey: "accountId")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(html, forKey: "html")
        try values.encodeIfPresent(displayName, forKey: "displayName")
        try values.encodeIfPresent(avatarURL, forKey: "avatarUrl")
    }
}
