// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a project version.
public struct Version: Codable {
    /// Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
    /// 
    ///  *  `operations` Returns the list of operations available for this version.
    ///  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
    /// 
    /// Optional for create and update.
    public var expand: String?
    /// The URL of the version.
    public var this: URL?
    /// The ID of the version.
    public var id: String?
    /// The description of the version. Optional when creating or updating a version.
    public var description: String?
    /// The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
    public var name: String?
    /// Indicates that the version is archived. Optional when creating or updating a version.
    public var isArchived: Bool?
    /// Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
    public var isReleased: Bool?
    /// The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
    public var startDate: NaiveDate?
    /// The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
    public var releaseDate: NaiveDate?
    /// Indicates that the version is overdue.
    public var isOverdue: Bool?
    /// The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
    public var userStartDate: String?
    /// The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
    public var userReleaseDate: String?
    /// Deprecated. Use `projectId`.
    public var project: String?
    /// The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
    public var projectID: Int64?
    /// The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
    public var moveUnfixedIssuesTo: URL?
    /// If the expand option `operations` is used, returns the list of operations available for this version.
    public var operations: [SimpleLink]?
    /// If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
    public var issuesStatusForFixVersion: VersionIssuesStatus?

    public init(expand: String? = nil, this: URL? = nil, id: String? = nil, description: String? = nil, name: String? = nil, isArchived: Bool? = nil, isReleased: Bool? = nil, startDate: NaiveDate? = nil, releaseDate: NaiveDate? = nil, isOverdue: Bool? = nil, userStartDate: String? = nil, userReleaseDate: String? = nil, project: String? = nil, projectID: Int64? = nil, moveUnfixedIssuesTo: URL? = nil, operations: [SimpleLink]? = nil, issuesStatusForFixVersion: VersionIssuesStatus? = nil) {
        self.expand = expand
        self.this = this
        self.id = id
        self.description = description
        self.name = name
        self.isArchived = isArchived
        self.isReleased = isReleased
        self.startDate = startDate
        self.releaseDate = releaseDate
        self.isOverdue = isOverdue
        self.userStartDate = userStartDate
        self.userReleaseDate = userReleaseDate
        self.project = project
        self.projectID = projectID
        self.moveUnfixedIssuesTo = moveUnfixedIssuesTo
        self.operations = operations
        self.issuesStatusForFixVersion = issuesStatusForFixVersion
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.expand = try values.decodeIfPresent(String.self, forKey: "expand")
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.isArchived = try values.decodeIfPresent(Bool.self, forKey: "archived")
        self.isReleased = try values.decodeIfPresent(Bool.self, forKey: "released")
        self.startDate = try values.decodeIfPresent(NaiveDate.self, forKey: "startDate")
        self.releaseDate = try values.decodeIfPresent(NaiveDate.self, forKey: "releaseDate")
        self.isOverdue = try values.decodeIfPresent(Bool.self, forKey: "overdue")
        self.userStartDate = try values.decodeIfPresent(String.self, forKey: "userStartDate")
        self.userReleaseDate = try values.decodeIfPresent(String.self, forKey: "userReleaseDate")
        self.project = try values.decodeIfPresent(String.self, forKey: "project")
        self.projectID = try values.decodeIfPresent(Int64.self, forKey: "projectId")
        self.moveUnfixedIssuesTo = try values.decodeIfPresent(URL.self, forKey: "moveUnfixedIssuesTo")
        self.operations = try values.decodeIfPresent([SimpleLink].self, forKey: "operations")
        self.issuesStatusForFixVersion = try values.decodeIfPresent(VersionIssuesStatus.self, forKey: "issuesStatusForFixVersion")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(expand, forKey: "expand")
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(isArchived, forKey: "archived")
        try values.encodeIfPresent(isReleased, forKey: "released")
        try values.encodeIfPresent(startDate, forKey: "startDate")
        try values.encodeIfPresent(releaseDate, forKey: "releaseDate")
        try values.encodeIfPresent(isOverdue, forKey: "overdue")
        try values.encodeIfPresent(userStartDate, forKey: "userStartDate")
        try values.encodeIfPresent(userReleaseDate, forKey: "userReleaseDate")
        try values.encodeIfPresent(project, forKey: "project")
        try values.encodeIfPresent(projectID, forKey: "projectId")
        try values.encodeIfPresent(moveUnfixedIssuesTo, forKey: "moveUnfixedIssuesTo")
        try values.encodeIfPresent(operations, forKey: "operations")
        try values.encodeIfPresent(issuesStatusForFixVersion, forKey: "issuesStatusForFixVersion")
    }
}
