// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Various counts of issues within a version.
public struct VersionIssueCounts: Codable {
    /// The URL of these count details.
    public var this: URL?
    /// Count of issues where the `fixVersion` is set to the version.
    public var issuesFixedCount: Int?
    /// Count of issues where the `affectedVersion` is set to the version.
    public var issuesAffectedCount: Int?
    /// Count of issues where a version custom field is set to the version.
    public var issueCountWithCustomFieldsShowingVersion: Int?
    /// List of custom fields using the version.
    public var customFieldUsage: [VersionUsageInCustomField]?

    public init(this: URL? = nil, issuesFixedCount: Int? = nil, issuesAffectedCount: Int? = nil, issueCountWithCustomFieldsShowingVersion: Int? = nil, customFieldUsage: [VersionUsageInCustomField]? = nil) {
        self.this = this
        self.issuesFixedCount = issuesFixedCount
        self.issuesAffectedCount = issuesAffectedCount
        self.issueCountWithCustomFieldsShowingVersion = issueCountWithCustomFieldsShowingVersion
        self.customFieldUsage = customFieldUsage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.this = try values.decodeIfPresent(URL.self, forKey: "self")
        self.issuesFixedCount = try values.decodeIfPresent(Int.self, forKey: "issuesFixedCount")
        self.issuesAffectedCount = try values.decodeIfPresent(Int.self, forKey: "issuesAffectedCount")
        self.issueCountWithCustomFieldsShowingVersion = try values.decodeIfPresent(Int.self, forKey: "issueCountWithCustomFieldsShowingVersion")
        self.customFieldUsage = try values.decodeIfPresent([VersionUsageInCustomField].self, forKey: "customFieldUsage")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(this, forKey: "self")
        try values.encodeIfPresent(issuesFixedCount, forKey: "issuesFixedCount")
        try values.encodeIfPresent(issuesAffectedCount, forKey: "issuesAffectedCount")
        try values.encodeIfPresent(issueCountWithCustomFieldsShowingVersion, forKey: "issueCountWithCustomFieldsShowingVersion")
        try values.encodeIfPresent(customFieldUsage, forKey: "customFieldUsage")
    }
}
