// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Details about a workflow.
public struct Workflow: Codable {
    /// Properties that identify a published workflow.
    public var id: PublishedWorkflowID
    /// The description of the workflow.
    public var description: String
    /// The transitions of the workflow.
    public var transitions: [Transition]?
    /// The statuses of the workflow.
    public var statuses: [WorkflowStatus]?
    /// Whether this is the default workflow.
    public var isDefault: Bool?
    /// The workflow schemes the workflow is assigned to.
    public var schemes: [WorkflowSchemeIDName]?
    /// The projects the workflow is assigned to, through workflow schemes.
    public var projects: [ProjectDetails]?
    /// Whether the workflow has a draft version.
    public var hasDraftWorkflow: Bool?
    /// Operations allowed on a workflow
    public var operations: WorkflowOperations?
    /// The creation date of the workflow.
    public var created: Date?
    /// The last edited date of the workflow.
    public var updated: Date?

    public init(id: PublishedWorkflowID, description: String, transitions: [Transition]? = nil, statuses: [WorkflowStatus]? = nil, isDefault: Bool? = nil, schemes: [WorkflowSchemeIDName]? = nil, projects: [ProjectDetails]? = nil, hasDraftWorkflow: Bool? = nil, operations: WorkflowOperations? = nil, created: Date? = nil, updated: Date? = nil) {
        self.id = id
        self.description = description
        self.transitions = transitions
        self.statuses = statuses
        self.isDefault = isDefault
        self.schemes = schemes
        self.projects = projects
        self.hasDraftWorkflow = hasDraftWorkflow
        self.operations = operations
        self.created = created
        self.updated = updated
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(PublishedWorkflowID.self, forKey: "id")
        self.description = try values.decode(String.self, forKey: "description")
        self.transitions = try values.decodeIfPresent([Transition].self, forKey: "transitions")
        self.statuses = try values.decodeIfPresent([WorkflowStatus].self, forKey: "statuses")
        self.isDefault = try values.decodeIfPresent(Bool.self, forKey: "isDefault")
        self.schemes = try values.decodeIfPresent([WorkflowSchemeIDName].self, forKey: "schemes")
        self.projects = try values.decodeIfPresent([ProjectDetails].self, forKey: "projects")
        self.hasDraftWorkflow = try values.decodeIfPresent(Bool.self, forKey: "hasDraftWorkflow")
        self.operations = try values.decodeIfPresent(WorkflowOperations.self, forKey: "operations")
        self.created = try values.decodeIfPresent(Date.self, forKey: "created")
        self.updated = try values.decodeIfPresent(Date.self, forKey: "updated")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(description, forKey: "description")
        try values.encodeIfPresent(transitions, forKey: "transitions")
        try values.encodeIfPresent(statuses, forKey: "statuses")
        try values.encodeIfPresent(isDefault, forKey: "isDefault")
        try values.encodeIfPresent(schemes, forKey: "schemes")
        try values.encodeIfPresent(projects, forKey: "projects")
        try values.encodeIfPresent(hasDraftWorkflow, forKey: "hasDraftWorkflow")
        try values.encodeIfPresent(operations, forKey: "operations")
        try values.encodeIfPresent(created, forKey: "created")
        try values.encodeIfPresent(updated, forKey: "updated")
    }
}
