// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A compound workflow transition rule condition. This object returns `nodeType` as `compound`.
public struct WorkflowCompoundCondition: Codable {
    /// The compound condition operator.
    public var `operator`: Operator
    /// The list of workflow conditions.
    public var conditions: [WorkflowCondition]
    public var nodeType: String

    /// The compound condition operator.
    public enum Operator: String, Codable, CaseIterable {
        case and = "AND"
        case or = "OR"
    }

    public init(`operator`: Operator, conditions: [WorkflowCondition], nodeType: String) {
        self.operator = `operator`
        self.conditions = conditions
        self.nodeType = nodeType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.operator = try values.decode(Operator.self, forKey: "operator")
        self.conditions = try values.decode([WorkflowCondition].self, forKey: "conditions")
        self.nodeType = try values.decode(String.self, forKey: "nodeType")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(`operator`, forKey: "operator")
        try values.encode(conditions, forKey: "conditions")
        try values.encode(nodeType, forKey: "nodeType")
    }
}
