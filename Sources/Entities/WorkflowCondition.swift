// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The workflow transition rule conditions tree.
public enum WorkflowCondition: Codable {
    case workflowSimpleCondition(WorkflowSimpleCondition)
    case workflowCompoundCondition(WorkflowCompoundCondition)

    public init(from decoder: Decoder) throws {

        struct Discriminator: Decodable {
            let nodeType: String
        }

        let container = try decoder.singleValueContainer()

        switch (try container.decode(Discriminator.self)).nodeType {
        case "simple": self = .workflowSimpleCondition(try container.decode(WorkflowSimpleCondition.self))
        case "compound": self = .workflowCompoundCondition(try container.decode(WorkflowCompoundCondition.self))

        default:
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to initialize `oneOf`")
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .workflowSimpleCondition(let value): try container.encode(value)
        case .workflowCompoundCondition(let value): try container.encode(value)
        }
    }
}
