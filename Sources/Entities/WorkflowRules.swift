// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A collection of transition rules.
public struct WorkflowRules: Codable {
    /// The workflow transition rule conditions tree.
    public var conditionsTree: WorkflowCondition?
    /// The workflow validators.
    public var validators: [WorkflowTransitionRule]?
    /// The workflow post functions.
    public var postFunctions: [WorkflowTransitionRule]?

    public init(conditionsTree: WorkflowCondition? = nil, validators: [WorkflowTransitionRule]? = nil, postFunctions: [WorkflowTransitionRule]? = nil) {
        self.conditionsTree = conditionsTree
        self.validators = validators
        self.postFunctions = postFunctions
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.conditionsTree = try values.decodeIfPresent(WorkflowCondition.self, forKey: "conditionsTree")
        self.validators = try values.decodeIfPresent([WorkflowTransitionRule].self, forKey: "validators")
        self.postFunctions = try values.decodeIfPresent([WorkflowTransitionRule].self, forKey: "postFunctions")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(conditionsTree, forKey: "conditionsTree")
        try values.encodeIfPresent(validators, forKey: "validators")
        try values.encodeIfPresent(postFunctions, forKey: "postFunctions")
    }
}
