// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A workflow with transition rules.
public struct WorkflowTransitionRules: Codable {
    /// Properties that identify a workflow.
    public var workflowID: WorkflowID
    /// The list of post functions within the workflow.
    public var postFunctions: [ConnectWorkflowTransitionRule]?
    /// The list of conditions within the workflow.
    public var conditions: [ConnectWorkflowTransitionRule]?
    /// The list of validators within the workflow.
    public var validators: [ConnectWorkflowTransitionRule]?

    public init(workflowID: WorkflowID, postFunctions: [ConnectWorkflowTransitionRule]? = nil, conditions: [ConnectWorkflowTransitionRule]? = nil, validators: [ConnectWorkflowTransitionRule]? = nil) {
        self.workflowID = workflowID
        self.postFunctions = postFunctions
        self.conditions = conditions
        self.validators = validators
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.workflowID = try values.decode(WorkflowID.self, forKey: "workflowId")
        self.postFunctions = try values.decodeIfPresent([ConnectWorkflowTransitionRule].self, forKey: "postFunctions")
        self.conditions = try values.decodeIfPresent([ConnectWorkflowTransitionRule].self, forKey: "conditions")
        self.validators = try values.decodeIfPresent([ConnectWorkflowTransitionRule].self, forKey: "validators")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(workflowID, forKey: "workflowId")
        try values.encodeIfPresent(postFunctions, forKey: "postFunctions")
        try values.encodeIfPresent(conditions, forKey: "conditions")
        try values.encodeIfPresent(validators, forKey: "validators")
    }
}
