// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Auditing {
    public var record: Record {
        Record(path: path + "/record")
    }

    public struct Record {
        /// Path: `/rest/api/3/auditing/record`
        public let path: String

        /// Get audit records
        ///
        /// Returns a list of audit records. The list can be filtered to include items:
        /// 
        ///  *  where each item in `filter` has at least one match in any of these fields:
        ///     
        ///      *  `summary`
        ///      *  `category`
        ///      *  `eventSource`
        ///      *  `objectItem.name` If the object is a user, account ID is available to filter.
        ///      *  `objectItem.parentName`
        ///      *  `objectItem.typeName`
        ///      *  `changedValues.changedFrom`
        ///      *  `changedValues.changedTo`
        ///      *  `remoteAddress`
        ///     
        ///     For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
        ///  *  created on or after a date and time.
        ///  *  created or or before a date and time.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.AuditRecords> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getAuditRecords")
        }

        public struct GetParameters {
            public var offset: Int32?
            public var limit: Int32?
            public var filter: String?
            public var from: Date?
            public var to: Date?

            public init(offset: Int32? = nil, limit: Int32? = nil, filter: String? = nil, from: Date? = nil, to: Date? = nil) {
                self.offset = offset
                self.limit = limit
                self.filter = filter
                self.from = from
                self.to = to
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(offset, forKey: "offset")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(from, forKey: "from")
                encoder.encode(to, forKey: "to")
                return encoder.items
            }
        }
    }
}
