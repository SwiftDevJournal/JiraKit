// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Component {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/rest/api/3/component/{id}`
        public let path: String

        /// Get component
        ///
        /// Returns a component.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
        public var get: Request<JiraKit.ProjectComponent> {
            Request(method: "GET", url: path, id: "getComponent")
        }

        /// Update component
        ///
        /// Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func put(_ body: JiraKit.ProjectComponent) -> Request<JiraKit.ProjectComponent> {
            Request(method: "PUT", url: path, body: body, id: "updateComponent")
        }

        /// Delete component
        ///
        /// Deletes a component.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func delete(moveIssuesTo: String? = nil) -> Request<Void> {
            Request(method: "DELETE", url: path, query: makeDeleteQuery(moveIssuesTo), id: "deleteComponent")
        }

        private func makeDeleteQuery(_ moveIssuesTo: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(moveIssuesTo, forKey: "moveIssuesTo")
            return encoder.items
        }
    }
}
