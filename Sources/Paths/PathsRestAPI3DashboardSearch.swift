// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Dashboard {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/rest/api/3/dashboard/search`
        public let path: String

        /// Search for dashboards
        ///
        /// Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:
        /// 
        ///  *  Dashboards owned by the user. Not returned for anonymous users.
        ///  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
        ///  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
        ///  *  Dashboards shared with a public project.
        ///  *  Dashboards shared with the public.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageBeanDashboard> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getDashboardsPaginated")
        }

        public struct GetParameters {
            public var dashboardName: String?
            public var accountID: String?
            public var owner: String?
            public var groupname: String?
            public var groupID: String?
            public var projectID: Int?
            public var orderBy: OrderBy?
            public var startAt: Int?
            public var maxResults: Int?
            public var status: Status?
            public var expand: String?

            public enum OrderBy: String, Codable, CaseIterable {
                case description
                case minusdescription = "-description"
                case plusdescription = "+description"
                case favoriteCount = "favorite_count"
                case minusfavoriteCount = "-favorite_count"
                case plusfavoriteCount = "+favorite_count"
                case id
                case minusid = "-id"
                case plusid = "+id"
                case isFavorite = "is_favorite"
                case minusisFavorite = "-is_favorite"
                case plusisFavorite = "+is_favorite"
                case name
                case minusname = "-name"
                case plusname = "+name"
                case owner
                case minusowner = "-owner"
                case plusowner = "+owner"
            }

            public enum Status: String, Codable, CaseIterable {
                case active
                case archived
                case deleted
            }

            public init(dashboardName: String? = nil, accountID: String? = nil, owner: String? = nil, groupname: String? = nil, groupID: String? = nil, projectID: Int? = nil, orderBy: OrderBy? = nil, startAt: Int? = nil, maxResults: Int? = nil, status: Status? = nil, expand: String? = nil) {
                self.dashboardName = dashboardName
                self.accountID = accountID
                self.owner = owner
                self.groupname = groupname
                self.groupID = groupID
                self.projectID = projectID
                self.orderBy = orderBy
                self.startAt = startAt
                self.maxResults = maxResults
                self.status = status
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(dashboardName, forKey: "dashboardName")
                encoder.encode(accountID, forKey: "accountId")
                encoder.encode(owner, forKey: "owner")
                encoder.encode(groupname, forKey: "groupname")
                encoder.encode(groupID, forKey: "groupId")
                encoder.encode(projectID, forKey: "projectId")
                encoder.encode(orderBy, forKey: "orderBy")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(status, forKey: "status")
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }
    }
}
