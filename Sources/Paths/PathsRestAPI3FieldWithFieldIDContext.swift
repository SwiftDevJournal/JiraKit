// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Field.WithFieldID {
    public var context: Context {
        Context(path: path + "/context")
    }

    public struct Context {
        /// Path: `/rest/api/3/field/{fieldId}/context`
        public let path: String

        /// Get custom field contexts
        ///
        /// Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:
        /// 
        ///  *  With no other parameters set, all contexts.
        ///  *  By defining `id` only, all contexts from the list of IDs.
        ///  *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)
        ///  *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageBeanCustomFieldContext> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getContextsForField")
        }

        public struct GetParameters {
            public var isAnyIssueType: Bool?
            public var isGlobalContext: Bool?
            public var contextID: [Int64]?
            public var startAt: Int64?
            public var maxResults: Int32?

            public init(isAnyIssueType: Bool? = nil, isGlobalContext: Bool? = nil, contextID: [Int64]? = nil, startAt: Int64? = nil, maxResults: Int32? = nil) {
                self.isAnyIssueType = isAnyIssueType
                self.isGlobalContext = isGlobalContext
                self.contextID = contextID
                self.startAt = startAt
                self.maxResults = maxResults
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isAnyIssueType, forKey: "isAnyIssueType")
                encoder.encode(isGlobalContext, forKey: "isGlobalContext")
                encoder.encode(contextID, forKey: "contextId")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                return encoder.items
            }
        }

        /// Create custom field context
        ///
        /// Creates a custom field context.
        /// 
        /// If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func post(_ body: JiraKit.CreateCustomFieldContext) -> Request<JiraKit.CreateCustomFieldContext> {
            Request(path: path, method: "POST", body: body, id: "createCustomFieldContext")
        }
    }
}
