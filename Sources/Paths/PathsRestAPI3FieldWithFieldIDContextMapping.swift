// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Field.WithFieldID.Context {
    public var mapping: Mapping {
        Mapping(path: path + "/mapping")
    }

    public struct Mapping {
        /// Path: `/rest/api/3/field/{fieldId}/context/mapping`
        public let path: String

        /// Get custom field contexts for projects and issue types
        ///
        /// Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.
        /// 
        /// If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.
        /// 
        /// Duplicate project and issue type mappings cannot be provided in the request.
        /// 
        /// The order of the returned values is the same as provided in the request.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func post(startAt: Int? = nil, maxResults: Int? = nil, _ body: JiraKit.ProjectIssueTypeMappings) -> Request<JiraKit.PageBeanContextForProjectAndIssueType> {
            Request(method: "POST", url: path, query: makePostQuery(startAt, maxResults), body: body, id: "getCustomFieldContextsForProjectsAndIssueTypes")
        }

        private func makePostQuery(_ startAt: Int?, _ maxResults: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(startAt, forKey: "startAt")
            encoder.encode(maxResults, forKey: "maxResults")
            return encoder.items
        }
    }
}
