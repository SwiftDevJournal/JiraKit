// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Field.WithFieldKey.Option.WithOptionID {
    public var issue: Issue {
        Issue(path: path + "/issue")
    }

    public struct Issue {
        /// Path: `/rest/api/3/field/{fieldKey}/option/{optionId}/issue`
        public let path: String

        /// Replace issue field option
        ///
        /// Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.
        /// 
        /// Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
        /// 
        /// This is an [asynchronous operation](#async). The response object contains a link to the long-running task.
        /// 
        /// Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
        public func delete(parameters: DeleteParameters? = nil) -> Request<Void> {
            Request(path: path, method: "DELETE", query: parameters?.asQuery, id: "replaceIssueFieldOption")
        }

        public struct DeleteParameters {
            public var replaceWith: Int64?
            public var jql: String?
            public var isOverrideScreenSecurity: Bool?
            public var isOverrideEditableFlag: Bool?

            public init(replaceWith: Int64? = nil, jql: String? = nil, isOverrideScreenSecurity: Bool? = nil, isOverrideEditableFlag: Bool? = nil) {
                self.replaceWith = replaceWith
                self.jql = jql
                self.isOverrideScreenSecurity = isOverrideScreenSecurity
                self.isOverrideEditableFlag = isOverrideEditableFlag
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(replaceWith, forKey: "replaceWith")
                encoder.encode(jql, forKey: "jql")
                encoder.encode(isOverrideScreenSecurity, forKey: "overrideScreenSecurity")
                encoder.encode(isOverrideEditableFlag, forKey: "overrideEditableFlag")
                return encoder.items
            }
        }
    }
}
