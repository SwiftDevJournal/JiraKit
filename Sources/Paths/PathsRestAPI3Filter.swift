// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3 {
    public var filter: Filter {
        Filter(path: path + "/filter")
    }

    public struct Filter {
        /// Path: `/rest/api/3/filter`
        public let path: String

        /// Get filters
        ///
        /// Returns all filters. Deprecated, use [ Search for filters](#api-rest-api-3-filter-search-get) that supports search and pagination.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** None, however, only the following filters are returned:
        /// 
        ///  *  filters owned by the user.
        ///  *  filters shared with a group that the user is a member of.
        ///  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        ///  *  filters shared with a public project.
        ///  *  filters shared with the public.
        @available(*, deprecated, message: "Deprecated")
        public func get(expand: String? = nil) -> Request<[JiraKit.Filter]> {
            Request(path: path, method: "GET", query: makeGetQuery(expand), id: "getFilters")
        }

        private func makeGetQuery(_ expand: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            return encoder.items
        }

        /// Create filter
        ///
        /// Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.
        /// 
        /// **[Permissions](#permissions) required:** Permission to access Jira.
        public func post(expand: String? = nil, isOverrideSharePermissions: Bool? = nil, _ body: JiraKit.Filter) -> Request<JiraKit.Filter> {
            Request(path: path, method: "POST", query: makePostQuery(expand, isOverrideSharePermissions), body: body, id: "createFilter")
        }

        private func makePostQuery(_ expand: String?, _ isOverrideSharePermissions: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(isOverrideSharePermissions, forKey: "overrideSharePermissions")
            return encoder.items
        }
    }
}
