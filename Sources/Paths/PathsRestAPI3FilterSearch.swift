// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Filter {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/rest/api/3/filter/search`
        public let path: String

        /// Search for filters
        ///
        /// Returns a [paginated](#pagination) list of filters. Use this operation to get:
        /// 
        ///  *  specific filters, by defining `id` only.
        ///  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:
        /// 
        ///  *  filters owned by the user.
        ///  *  filters shared with a group that the user is a member of.
        ///  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        ///  *  filters shared with a public project.
        ///  *  filters shared with the public.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageBeanFilterDetails> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getFiltersPaginated")
        }

        public struct GetParameters {
            public var filterName: String?
            public var accountID: String?
            public var owner: String?
            public var groupname: String?
            public var groupID: String?
            public var projectID: Int?
            public var id: [Int]?
            public var orderBy: OrderBy?
            public var startAt: Int?
            public var maxResults: Int?
            public var expand: String?
            public var isOverrideSharePermissions: Bool?

            public enum OrderBy: String, Codable, CaseIterable {
                case description
                case minusdescription = "-description"
                case plusdescription = "+description"
                case favouriteCount = "favourite_count"
                case minusfavouriteCount = "-favourite_count"
                case plusfavouriteCount = "+favourite_count"
                case id
                case minusid = "-id"
                case plusid = "+id"
                case isFavourite = "is_favourite"
                case minusisFavourite = "-is_favourite"
                case plusisFavourite = "+is_favourite"
                case name
                case minusname = "-name"
                case plusname = "+name"
                case owner
                case minusowner = "-owner"
                case plusowner = "+owner"
                case isShared = "is_shared"
                case minusisShared = "-is_shared"
                case plusisShared = "+is_shared"
            }

            public init(filterName: String? = nil, accountID: String? = nil, owner: String? = nil, groupname: String? = nil, groupID: String? = nil, projectID: Int? = nil, id: [Int]? = nil, orderBy: OrderBy? = nil, startAt: Int? = nil, maxResults: Int? = nil, expand: String? = nil, isOverrideSharePermissions: Bool? = nil) {
                self.filterName = filterName
                self.accountID = accountID
                self.owner = owner
                self.groupname = groupname
                self.groupID = groupID
                self.projectID = projectID
                self.id = id
                self.orderBy = orderBy
                self.startAt = startAt
                self.maxResults = maxResults
                self.expand = expand
                self.isOverrideSharePermissions = isOverrideSharePermissions
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filterName, forKey: "filterName")
                encoder.encode(accountID, forKey: "accountId")
                encoder.encode(owner, forKey: "owner")
                encoder.encode(groupname, forKey: "groupname")
                encoder.encode(groupID, forKey: "groupId")
                encoder.encode(projectID, forKey: "projectId")
                encoder.encode(id, forKey: "id")
                encoder.encode(orderBy, forKey: "orderBy")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(isOverrideSharePermissions, forKey: "overrideSharePermissions")
                return encoder.items
            }
        }
    }
}
