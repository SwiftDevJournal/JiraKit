// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Filter.WithID {
    public var favourite: Favourite {
        Favourite(path: path + "/favourite")
    }

    public struct Favourite {
        /// Path: `/rest/api/3/filter/{id}/favourite`
        public let path: String

        /// Add filter as favorite
        ///
        /// Add a filter as a favorite for the user.
        /// 
        /// **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:
        /// 
        ///  *  filters owned by the user.
        ///  *  filters shared with a group that the user is a member of.
        ///  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        ///  *  filters shared with a public project.
        ///  *  filters shared with the public.
        public func put(expand: String? = nil) -> Request<JiraKit.Filter> {
            Request(path: path, method: "PUT", query: makePutQuery(expand), id: "setFavouriteForFilter")
        }

        private func makePutQuery(_ expand: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            return encoder.items
        }

        /// Remove filter as favorite
        ///
        /// Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.
        /// 
        /// **[Permissions](#permissions) required:** Permission to access Jira.
        public func delete(expand: String? = nil) -> Request<JiraKit.Filter> {
            Request(path: path, method: "DELETE", query: makeDeleteQuery(expand), id: "deleteFavouriteForFilter")
        }

        private func makeDeleteQuery(_ expand: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            return encoder.items
        }
    }
}
