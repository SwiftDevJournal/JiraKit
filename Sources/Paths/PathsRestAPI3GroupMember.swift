// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Group {
    public var member: Member {
        Member(path: path + "/member")
    }

    public struct Member {
        /// Path: `/rest/api/3/group/member`
        public let path: String

        /// Get users from group
        ///
        /// Returns a [paginated](#pagination) list of all users in a group.
        /// 
        /// Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageBeanUserDetails> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getUsersFromGroup")
        }

        public struct GetParameters {
            public var groupname: String?
            public var groupID: String?
            public var isIncludeInactiveUsers: Bool?
            public var startAt: Int?
            public var maxResults: Int?

            public init(groupname: String? = nil, groupID: String? = nil, isIncludeInactiveUsers: Bool? = nil, startAt: Int? = nil, maxResults: Int? = nil) {
                self.groupname = groupname
                self.groupID = groupID
                self.isIncludeInactiveUsers = isIncludeInactiveUsers
                self.startAt = startAt
                self.maxResults = maxResults
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(groupname, forKey: "groupname")
                encoder.encode(groupID, forKey: "groupId")
                encoder.encode(isIncludeInactiveUsers, forKey: "includeInactiveUsers")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                return encoder.items
            }
        }
    }
}
