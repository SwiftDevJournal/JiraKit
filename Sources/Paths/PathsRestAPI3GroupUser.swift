// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Group {
    public var user: User {
        User(path: path + "/user")
    }

    public struct User {
        /// Path: `/rest/api/3/group/user`
        public let path: String

        /// Add user to group
        ///
        /// Adds a user to a group.
        /// 
        /// **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
        public func post(groupname: String? = nil, groupID: String? = nil, _ body: JiraKit.UpdateUserToGroupBean) -> Request<JiraKit.Group> {
            Request(method: "POST", url: path, query: makePostQuery(groupname, groupID), body: body, id: "addUserToGroup")
        }

        private func makePostQuery(_ groupname: String?, _ groupID: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(groupname, forKey: "groupname")
            encoder.encode(groupID, forKey: "groupId")
            return encoder.items
        }

        /// Remove user from group
        ///
        /// Removes a user from a group.
        /// 
        /// **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
        public func delete(parameters: DeleteParameters) -> Request<Void> {
            Request(method: "DELETE", url: path, query: parameters.asQuery, id: "removeUserFromGroup")
        }

        public struct DeleteParameters {
            public var groupname: String?
            public var groupID: String?
            public var username: String?
            /// Example: "5b10ac8d82e05b22cc7d4ef5"
            public var accountID: String

            public init(groupname: String? = nil, groupID: String? = nil, username: String? = nil, accountID: String) {
                self.groupname = groupname
                self.groupID = groupID
                self.username = username
                self.accountID = accountID
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(groupname, forKey: "groupname")
                encoder.encode(groupID, forKey: "groupId")
                encoder.encode(username, forKey: "username")
                encoder.encode(accountID, forKey: "accountId")
                return encoder.items
            }
        }
    }
}
