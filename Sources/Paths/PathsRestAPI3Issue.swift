// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3 {
    public var issue: Issue {
        Issue(path: path + "/issue")
    }

    public struct Issue {
        /// Path: `/rest/api/3/issue`
        public let path: String

        /// Create issue
        ///
        /// Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
        /// 
        /// The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
        /// 
        /// Creating a subtask differs from creating an issue as follows:
        /// 
        ///  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
        ///  *  `parent` must contain the ID or key of the parent issue.
        /// 
        /// In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
        /// 
        /// **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
        public func post(isUpdateHistory: Bool? = nil, _ body: JiraKit.IssueUpdateDetails) -> Request<JiraKit.CreatedIssue> {
            Request(path: path, method: "POST", query: makePostQuery(isUpdateHistory), body: body, id: "createIssue")
        }

        private func makePostQuery(_ isUpdateHistory: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isUpdateHistory, forKey: "updateHistory")
            return encoder.items
        }
    }
}
