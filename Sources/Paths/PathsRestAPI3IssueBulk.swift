// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issue {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/rest/api/3/issue/bulk`
        public let path: String

        /// Bulk create issue
        ///
        /// Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.
        /// 
        /// The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
        /// 
        /// Creating a subtask differs from creating an issue as follows:
        /// 
        ///  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
        ///  *  `parent` the must contain the ID or key of the parent issue.
        /// 
        /// **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
        public func post(_ body: JiraKit.IssuesUpdateBean) -> Request<JiraKit.CreatedIssues> {
            Request(method: "POST", url: path, body: body, id: "createIssues")
        }
    }
}
