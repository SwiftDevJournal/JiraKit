// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issue {
    public var picker: Picker {
        Picker(path: path + "/picker")
    }

    public struct Picker {
        /// Path: `/rest/api/3/issue/picker`
        public let path: String

        /// Get issue picker suggestions
        ///
        /// Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.
        /// 
        /// This operation returns two lists:
        /// 
        ///  *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
        ///  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** None.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.IssuePickerSuggestions> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getIssuePickerResource")
        }

        public struct GetParameters {
            /// Example: "query"
            public var query: String?
            public var currentJQL: String?
            public var currentIssueKey: String?
            public var currentProjectID: String?
            public var isShowSubTasks: Bool?
            public var isShowSubTaskParent: Bool?

            public init(query: String? = nil, currentJQL: String? = nil, currentIssueKey: String? = nil, currentProjectID: String? = nil, isShowSubTasks: Bool? = nil, isShowSubTaskParent: Bool? = nil) {
                self.query = query
                self.currentJQL = currentJQL
                self.currentIssueKey = currentIssueKey
                self.currentProjectID = currentProjectID
                self.isShowSubTasks = isShowSubTasks
                self.isShowSubTaskParent = isShowSubTaskParent
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(query, forKey: "query")
                encoder.encode(currentJQL, forKey: "currentJQL")
                encoder.encode(currentIssueKey, forKey: "currentIssueKey")
                encoder.encode(currentProjectID, forKey: "currentProjectId")
                encoder.encode(isShowSubTasks, forKey: "showSubTasks")
                encoder.encode(isShowSubTaskParent, forKey: "showSubTaskParent")
                return encoder.items
            }
        }
    }
}
