// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issue.WithIssueIDOrKey {
    public var comment: Comment {
        Comment(path: path + "/comment")
    }

    public struct Comment {
        /// Path: `/rest/api/3/issue/{issueIdOrKey}/comment`
        public let path: String

        /// Get comments
        ///
        /// Returns all comments for an issue.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** Comments are included in the response where the user has:
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageOfComments> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getComments")
        }

        public struct GetParameters {
            public var startAt: Int64?
            public var maxResults: Int32?
            public var orderBy: OrderBy?
            public var expand: String?

            public enum OrderBy: String, Codable, CaseIterable {
                case created
                case minuscreated = "-created"
                case pluscreated = "+created"
            }

            public init(startAt: Int64? = nil, maxResults: Int32? = nil, orderBy: OrderBy? = nil, expand: String? = nil) {
                self.startAt = startAt
                self.maxResults = maxResults
                self.orderBy = orderBy
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(orderBy, forKey: "orderBy")
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }

        /// Add comment
        ///
        /// Adds a comment to an issue.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        public func post(expand: String? = nil, _ body: JiraKit.Comment) -> Request<JiraKit.Comment> {
            Request(path: path, method: "POST", query: makePostQuery(expand), body: body, id: "addComment")
        }

        private func makePostQuery(_ expand: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            return encoder.items
        }
    }
}
