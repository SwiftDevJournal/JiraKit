// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issue.WithIssueIDOrKey.Comment {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/rest/api/3/issue/{issueIdOrKey}/comment/{id}`
        public let path: String

        /// Get comment
        ///
        /// Returns a comment.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
        public func get(expand: String? = nil) -> Request<JiraKit.Comment> {
            Request(path: path, method: "GET", query: makeGetQuery(expand), id: "getComment")
        }

        private func makeGetQuery(_ expand: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            return encoder.items
        }

        /// Update comment
        ///
        /// Updates a comment.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
        ///  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
        public func put(parameters: PutParameters? = nil, _ body: JiraKit.Comment) -> Request<JiraKit.Comment> {
            Request(path: path, method: "PUT", query: parameters?.asQuery, body: body, id: "updateComment")
        }

        public struct PutParameters {
            public var isNotifyUsers: Bool?
            public var isOverrideEditableFlag: Bool?
            public var expand: String?

            public init(isNotifyUsers: Bool? = nil, isOverrideEditableFlag: Bool? = nil, expand: String? = nil) {
                self.isNotifyUsers = isNotifyUsers
                self.isOverrideEditableFlag = isOverrideEditableFlag
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isNotifyUsers, forKey: "notifyUsers")
                encoder.encode(isOverrideEditableFlag, forKey: "overrideEditableFlag")
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }

        /// Delete comment
        ///
        /// Deletes a comment.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
        ///  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "deleteComment")
        }
    }
}
