// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issue.WithIssueIDOrKey {
    public var transitions: Transitions {
        Transitions(path: path + "/transitions")
    }

    public struct Transitions {
        /// Path: `/rest/api/3/issue/{issueIdOrKey}/transitions`
        public let path: String

        /// Get transitions
        ///
        /// Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.
        /// 
        /// Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required: A list or transition is returned only when the user has:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// 
        /// However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.Transitions> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getTransitions")
        }

        public struct GetParameters {
            public var expand: String?
            public var transitionID: String?
            public var isSkipRemoteOnlyCondition: Bool?
            public var isIncludeUnavailableTransitions: Bool?
            public var isSortByOpsBarAndStatus: Bool?

            public init(expand: String? = nil, transitionID: String? = nil, isSkipRemoteOnlyCondition: Bool? = nil, isIncludeUnavailableTransitions: Bool? = nil, isSortByOpsBarAndStatus: Bool? = nil) {
                self.expand = expand
                self.transitionID = transitionID
                self.isSkipRemoteOnlyCondition = isSkipRemoteOnlyCondition
                self.isIncludeUnavailableTransitions = isIncludeUnavailableTransitions
                self.isSortByOpsBarAndStatus = isSortByOpsBarAndStatus
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(transitionID, forKey: "transitionId")
                encoder.encode(isSkipRemoteOnlyCondition, forKey: "skipRemoteOnlyCondition")
                encoder.encode(isIncludeUnavailableTransitions, forKey: "includeUnavailableTransitions")
                encoder.encode(isSortByOpsBarAndStatus, forKey: "sortByOpsBarAndStatus")
                return encoder.items
            }
        }

        /// Transition issue
        ///
        /// Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.
        /// 
        /// sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        public func post(_ body: JiraKit.IssueUpdateDetails) -> Request<AnyJSON> {
            Request(path: path, method: "POST", body: body, id: "doTransition")
        }
    }
}
