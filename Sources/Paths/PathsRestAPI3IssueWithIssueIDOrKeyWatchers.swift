// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issue.WithIssueIDOrKey {
    public var watchers: Watchers {
        Watchers(path: path + "/watchers")
    }

    public struct Watchers {
        /// Path: `/rest/api/3/issue/{issueIdOrKey}/watchers`
        public let path: String

        /// Get issue watchers
        ///
        /// Returns the watchers for an issue.
        /// 
        /// This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        public var get: Request<JiraKit.Watchers> {
            Request(method: "GET", url: path, id: "getIssueWatchers")
        }

        /// Add watcher
        ///
        /// Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.
        /// 
        /// This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        public func post(_ body: String) -> Request<AnyJSON> {
            Request(method: "POST", url: path, body: body, id: "addWatcher")
        }

        /// Delete watcher
        ///
        /// Deletes a user as a watcher of an issue.
        /// 
        /// This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        public func delete(username: String? = nil, accountID: String? = nil) -> Request<Void> {
            Request(method: "DELETE", url: path, query: makeDeleteQuery(username, accountID), id: "removeWatcher")
        }

        private func makeDeleteQuery(_ username: String?, _ accountID: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(username, forKey: "username")
            encoder.encode(accountID, forKey: "accountId")
            return encoder.items
        }
    }
}
