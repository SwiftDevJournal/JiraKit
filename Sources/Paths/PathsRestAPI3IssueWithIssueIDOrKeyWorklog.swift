// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issue.WithIssueIDOrKey {
    public var worklog: Worklog {
        Worklog(path: path + "/worklog")
    }

    public struct Worklog {
        /// Path: `/rest/api/3/issue/{issueIdOrKey}/worklog`
        public let path: String

        /// Get issue worklogs
        ///
        /// Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.
        /// 
        /// Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** Workloads are only returned where the user has:
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageOfWorklogs> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getIssueWorklog")
        }

        public struct GetParameters {
            public var startAt: Int?
            public var maxResults: Int?
            public var startedAfter: Int?
            public var startedBefore: Int?
            public var expand: String?

            public init(startAt: Int? = nil, maxResults: Int? = nil, startedAfter: Int? = nil, startedBefore: Int? = nil, expand: String? = nil) {
                self.startAt = startAt
                self.maxResults = maxResults
                self.startedAfter = startedAfter
                self.startedBefore = startedBefore
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(startedAfter, forKey: "startedAfter")
                encoder.encode(startedBefore, forKey: "startedBefore")
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }

        /// Add worklog
        ///
        /// Adds a worklog to an issue.
        /// 
        /// Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        public func post(parameters: PostParameters? = nil, _ body: JiraKit.Worklog) -> Request<JiraKit.Worklog> {
            Request(method: "POST", url: path, query: parameters?.asQuery, body: body, id: "addWorklog")
        }

        public struct PostParameters {
            public var isNotifyUsers: Bool?
            public var adjustEstimate: AdjustEstimate?
            public var newEstimate: String?
            public var reduceBy: String?
            public var expand: String?
            public var isOverrideEditableFlag: Bool?

            public enum AdjustEstimate: String, Codable, CaseIterable {
                case new
                case leave
                case manual
                case auto
            }

            public init(isNotifyUsers: Bool? = nil, adjustEstimate: AdjustEstimate? = nil, newEstimate: String? = nil, reduceBy: String? = nil, expand: String? = nil, isOverrideEditableFlag: Bool? = nil) {
                self.isNotifyUsers = isNotifyUsers
                self.adjustEstimate = adjustEstimate
                self.newEstimate = newEstimate
                self.reduceBy = reduceBy
                self.expand = expand
                self.isOverrideEditableFlag = isOverrideEditableFlag
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isNotifyUsers, forKey: "notifyUsers")
                encoder.encode(adjustEstimate, forKey: "adjustEstimate")
                encoder.encode(newEstimate, forKey: "newEstimate")
                encoder.encode(reduceBy, forKey: "reduceBy")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(isOverrideEditableFlag, forKey: "overrideEditableFlag")
                return encoder.items
            }
        }
    }
}
