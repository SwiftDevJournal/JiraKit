// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issue.WithIssueIDOrKey.Worklog {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/rest/api/3/issue/{issueIdOrKey}/worklog/{id}`
        public let path: String

        /// Get worklog
        ///
        /// Returns a worklog.
        /// 
        /// Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        public func get(expand: String? = nil) -> Request<JiraKit.Worklog> {
            Request(path: path, method: "GET", query: makeGetQuery(expand), id: "getWorklog")
        }

        private func makeGetQuery(_ expand: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            return encoder.items
        }

        /// Update worklog
        ///
        /// Updates a worklog.
        /// 
        /// Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
        ///  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        public func put(parameters: PutParameters? = nil, _ body: JiraKit.Worklog) -> Request<JiraKit.Worklog> {
            Request(path: path, method: "PUT", query: parameters?.asQuery, body: body, id: "updateWorklog")
        }

        public struct PutParameters {
            public var isNotifyUsers: Bool?
            public var adjustEstimate: AdjustEstimate?
            public var newEstimate: String?
            public var expand: String?
            public var isOverrideEditableFlag: Bool?

            public enum AdjustEstimate: String, Codable, CaseIterable {
                case new
                case leave
                case manual
                case auto
            }

            public init(isNotifyUsers: Bool? = nil, adjustEstimate: AdjustEstimate? = nil, newEstimate: String? = nil, expand: String? = nil, isOverrideEditableFlag: Bool? = nil) {
                self.isNotifyUsers = isNotifyUsers
                self.adjustEstimate = adjustEstimate
                self.newEstimate = newEstimate
                self.expand = expand
                self.isOverrideEditableFlag = isOverrideEditableFlag
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isNotifyUsers, forKey: "notifyUsers")
                encoder.encode(adjustEstimate, forKey: "adjustEstimate")
                encoder.encode(newEstimate, forKey: "newEstimate")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(isOverrideEditableFlag, forKey: "overrideEditableFlag")
                return encoder.items
            }
        }

        /// Delete worklog
        ///
        /// Deletes a worklog from an issue.
        /// 
        /// Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        ///  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
        ///  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        public func delete(parameters: DeleteParameters? = nil) -> Request<Void> {
            Request(path: path, method: "DELETE", query: parameters?.asQuery, id: "deleteWorklog")
        }

        public struct DeleteParameters {
            public var isNotifyUsers: Bool?
            public var adjustEstimate: AdjustEstimate?
            public var newEstimate: String?
            public var increaseBy: String?
            public var isOverrideEditableFlag: Bool?

            public enum AdjustEstimate: String, Codable, CaseIterable {
                case new
                case leave
                case manual
                case auto
            }

            public init(isNotifyUsers: Bool? = nil, adjustEstimate: AdjustEstimate? = nil, newEstimate: String? = nil, increaseBy: String? = nil, isOverrideEditableFlag: Bool? = nil) {
                self.isNotifyUsers = isNotifyUsers
                self.adjustEstimate = adjustEstimate
                self.newEstimate = newEstimate
                self.increaseBy = increaseBy
                self.isOverrideEditableFlag = isOverrideEditableFlag
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isNotifyUsers, forKey: "notifyUsers")
                encoder.encode(adjustEstimate, forKey: "adjustEstimate")
                encoder.encode(newEstimate, forKey: "newEstimate")
                encoder.encode(increaseBy, forKey: "increaseBy")
                encoder.encode(isOverrideEditableFlag, forKey: "overrideEditableFlag")
                return encoder.items
            }
        }
    }
}
