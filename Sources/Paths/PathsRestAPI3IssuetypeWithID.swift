// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Issuetype {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/rest/api/3/issuetype/{id}`
        public let path: String

        /// Get issue type
        ///
        /// Returns an issue type.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public var get: Request<JiraKit.IssueTypeDetails> {
            Request(path: path, method: "GET", id: "getIssueType")
        }

        /// Update issue type
        ///
        /// Updates the issue type.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func put(_ body: JiraKit.IssueTypeUpdateBean) -> Request<JiraKit.IssueTypeDetails> {
            Request(path: path, method: "PUT", body: body, id: "updateIssueType")
        }

        /// Delete issue type
        ///
        /// Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func delete(alternativeIssueTypeID: String? = nil) -> Request<Void> {
            Request(path: path, method: "DELETE", query: makeDeleteQuery(alternativeIssueTypeID), id: "deleteIssueType")
        }

        private func makeDeleteQuery(_ alternativeIssueTypeID: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(alternativeIssueTypeID, forKey: "alternativeIssueTypeId")
            return encoder.items
        }
    }
}
