// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3 {
    public var issuetypescheme: Issuetypescheme {
        Issuetypescheme(path: path + "/issuetypescheme")
    }

    public struct Issuetypescheme {
        /// Path: `/rest/api/3/issuetypescheme`
        public let path: String

        /// Get all issue type schemes
        ///
        /// Returns a [paginated](#pagination) list of issue type schemes.
        /// 
        /// Only issue type schemes used in classic projects are returned.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageBeanIssueTypeScheme> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getAllIssueTypeSchemes")
        }

        public struct GetParameters {
            public var startAt: Int?
            public var maxResults: Int?
            public var id: [Int]?
            public var orderBy: OrderBy?
            public var expand: String?
            public var queryString: String?

            public enum OrderBy: String, Codable, CaseIterable {
                case name
                case minusname = "-name"
                case plusname = "+name"
                case id
                case minusid = "-id"
                case plusid = "+id"
            }

            public init(startAt: Int? = nil, maxResults: Int? = nil, id: [Int]? = nil, orderBy: OrderBy? = nil, expand: String? = nil, queryString: String? = nil) {
                self.startAt = startAt
                self.maxResults = maxResults
                self.id = id
                self.orderBy = orderBy
                self.expand = expand
                self.queryString = queryString
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(id, forKey: "id")
                encoder.encode(orderBy, forKey: "orderBy")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(queryString, forKey: "queryString")
                return encoder.items
            }
        }

        /// Create issue type scheme
        ///
        /// Creates an issue type scheme.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func post(_ body: JiraKit.IssueTypeSchemeDetails) -> Request<JiraKit.IssueTypeSchemeID> {
            Request(method: "POST", url: path, body: body, id: "createIssueTypeScheme")
        }
    }
}
