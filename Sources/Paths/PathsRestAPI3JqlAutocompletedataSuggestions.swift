// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Jql.Autocompletedata {
    public var suggestions: Suggestions {
        Suggestions(path: path + "/suggestions")
    }

    public struct Suggestions {
        /// Path: `/rest/api/3/jql/autocompletedata/suggestions`
        public let path: String

        /// Get field auto complete suggestions
        ///
        /// Returns the JQL search auto complete suggestions for a field.
        /// 
        /// Suggestions can be obtained by providing:
        /// 
        ///  *  `fieldName` to get a list of all values for the field.
        ///  *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
        ///  *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
        ///  *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** None.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.AutoCompleteSuggestions> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getFieldAutoCompleteForQueryString")
        }

        public struct GetParameters {
            /// Example: "reporter"
            public var fieldName: String?
            public var fieldValue: String?
            public var predicateName: String?
            public var predicateValue: String?

            public init(fieldName: String? = nil, fieldValue: String? = nil, predicateName: String? = nil, predicateValue: String? = nil) {
                self.fieldName = fieldName
                self.fieldValue = fieldValue
                self.predicateName = predicateName
                self.predicateValue = predicateValue
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(fieldName, forKey: "fieldName")
                encoder.encode(fieldValue, forKey: "fieldValue")
                encoder.encode(predicateName, forKey: "predicateName")
                encoder.encode(predicateValue, forKey: "predicateValue")
                return encoder.items
            }
        }
    }
}
