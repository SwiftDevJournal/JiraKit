// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Priority {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/rest/api/3/priority/search`
        public let path: String

        /// Search priorities
        ///
        /// Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:
        /// 
        ///  *  a list of priority IDs. Any invalid priority IDs are ignored.
        ///  *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.
        /// 
        /// **[Permissions](#permissions) required:** Permission to access Jira.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageBeanPriority> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "searchPriorities")
        }

        public struct GetParameters {
            public var startAt: Int64?
            public var maxResults: Int32?
            public var id: [String]?
            public var isOnlyDefault: Bool?

            public init(startAt: Int64? = nil, maxResults: Int32? = nil, id: [String]? = nil, isOnlyDefault: Bool? = nil) {
                self.startAt = startAt
                self.maxResults = maxResults
                self.id = id
                self.isOnlyDefault = isOnlyDefault
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(id, forKey: "id")
                encoder.encode(isOnlyDefault, forKey: "onlyDefault")
                return encoder.items
            }
        }
    }
}
