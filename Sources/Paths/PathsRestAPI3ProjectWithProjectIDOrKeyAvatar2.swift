// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Project.WithProjectIDOrKey {
    public var avatar2: Avatar2 {
        Avatar2(path: path + "/avatar2")
    }

    public struct Avatar2 {
        /// Path: `/rest/api/3/project/{projectIdOrKey}/avatar2`
        public let path: String

        /// Load project avatar
        ///
        /// Loads an avatar for a project.
        /// 
        /// Specify the avatar's local file location in the body of the request. Also, include the following headers:
        /// 
        ///  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
        ///  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
        /// 
        /// For example:  
        /// `curl --request POST `
        /// 
        /// `--user email@example.com:<api_token> `
        /// 
        /// `--header 'X-Atlassian-Token: no-check' `
        /// 
        /// `--header 'Content-Type: image/< image_type>' `
        /// 
        /// `--data-binary "<@/path/to/file/with/your/avatar>" `
        /// 
        /// `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`
        /// 
        /// The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
        /// 
        /// The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
        /// 
        /// After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
        /// 
        /// **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
        public func post(parameters: PostParameters? = nil, _ body: Data) -> Request<JiraKit.Avatar> {
            Request(method: "POST", url: path, query: parameters?.asQuery, body: body, id: "createProjectAvatar")
        }

        public struct PostParameters {
            public var x: Int32?
            public var y: Int32?
            public var size: Int32?

            public init(x: Int32? = nil, y: Int32? = nil, size: Int32? = nil) {
                self.x = x
                self.y = y
                self.size = size
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(x, forKey: "x")
                encoder.encode(y, forKey: "y")
                encoder.encode(size, forKey: "size")
                return encoder.items
            }
        }
    }
}
