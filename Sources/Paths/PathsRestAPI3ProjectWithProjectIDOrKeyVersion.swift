// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Project.WithProjectIDOrKey {
    public var version: Version {
        Version(path: path + "/version")
    }

    public struct Version {
        /// Path: `/rest/api/3/project/{projectIdOrKey}/version`
        public let path: String

        /// Get project versions paginated
        ///
        /// Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageBeanVersion> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getProjectVersionsPaginated")
        }

        public struct GetParameters {
            public var startAt: Int64?
            public var maxResults: Int32?
            public var orderBy: OrderBy?
            public var query: String?
            public var status: String?
            public var expand: String?

            public enum OrderBy: String, Codable, CaseIterable {
                case description
                case minusdescription = "-description"
                case plusdescription = "+description"
                case name
                case minusname = "-name"
                case plusname = "+name"
                case releaseDate
                case minusreleaseDate = "-releaseDate"
                case plusreleaseDate = "+releaseDate"
                case sequence
                case minussequence = "-sequence"
                case plussequence = "+sequence"
                case startDate
                case minusstartDate = "-startDate"
                case plusstartDate = "+startDate"
            }

            public init(startAt: Int64? = nil, maxResults: Int32? = nil, orderBy: OrderBy? = nil, query: String? = nil, status: String? = nil, expand: String? = nil) {
                self.startAt = startAt
                self.maxResults = maxResults
                self.orderBy = orderBy
                self.query = query
                self.status = status
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(orderBy, forKey: "orderBy")
                encoder.encode(query, forKey: "query")
                encoder.encode(status, forKey: "status")
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }
    }
}
