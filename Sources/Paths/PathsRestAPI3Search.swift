// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3 {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/rest/api/3/search`
        public let path: String

        /// Search for issues using JQL (GET)
        ///
        /// Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
        /// 
        /// If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** Issues are included in the response where the user has:
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.SearchResults> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "searchForIssuesUsingJql")
        }

        public struct GetParameters {
            /// Example: "project = HSP"
            public var jql: String?
            public var startAt: Int?
            public var maxResults: Int?
            public var validateQuery: ValidateQuery?
            public var fields: [String]?
            public var expand: String?
            public var properties: [String]?
            public var isFieldsByKeys: Bool?

            public enum ValidateQuery: String, Codable, CaseIterable {
                case strict
                case warn
                case `none`
                case `true`
                case `false`
            }

            public init(jql: String? = nil, startAt: Int? = nil, maxResults: Int? = nil, validateQuery: ValidateQuery? = nil, fields: [String]? = nil, expand: String? = nil, properties: [String]? = nil, isFieldsByKeys: Bool? = nil) {
                self.jql = jql
                self.startAt = startAt
                self.maxResults = maxResults
                self.validateQuery = validateQuery
                self.fields = fields
                self.expand = expand
                self.properties = properties
                self.isFieldsByKeys = isFieldsByKeys
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(jql, forKey: "jql")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(validateQuery, forKey: "validateQuery")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(properties, forKey: "properties")
                encoder.encode(isFieldsByKeys, forKey: "fieldsByKeys")
                return encoder.items
            }
        }

        /// Search for issues using JQL (POST)
        ///
        /// Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
        /// 
        /// There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** Issues are included in the response where the user has:
        /// 
        ///  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        public func post(_ body: JiraKit.SearchRequestBean) -> Request<JiraKit.SearchResults> {
            Request(method: "POST", url: path, body: body, id: "searchForIssuesUsingJqlPost")
        }
    }
}
