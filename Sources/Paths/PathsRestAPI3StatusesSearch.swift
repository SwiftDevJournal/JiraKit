// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Statuses {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/rest/api/3/statuses/search`
        public let path: String

        /// Search statuses paginated
        ///
        /// Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        ///  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageOfStatuses> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "search")
        }

        public struct GetParameters {
            public var expand: String?
            public var projectID: String?
            public var startAt: Int?
            public var maxResults: Int?
            public var searchString: String?
            public var statusCategory: String?

            public init(expand: String? = nil, projectID: String? = nil, startAt: Int? = nil, maxResults: Int? = nil, searchString: String? = nil, statusCategory: String? = nil) {
                self.expand = expand
                self.projectID = projectID
                self.startAt = startAt
                self.maxResults = maxResults
                self.searchString = searchString
                self.statusCategory = statusCategory
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(projectID, forKey: "projectId")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(searchString, forKey: "searchString")
                encoder.encode(statusCategory, forKey: "statusCategory")
                return encoder.items
            }
        }
    }
}
