// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3 {
    public var user: User {
        User(path: path + "/user")
    }

    public struct User {
        /// Path: `/rest/api/3/user`
        public let path: String

        /// Get user
        ///
        /// Returns a user.
        /// 
        /// Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// 
        /// **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.User> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getUser")
        }

        public struct GetParameters {
            /// Example: "5b10ac8d82e05b22cc7d4ef5"
            public var accountID: String?
            public var username: String?
            public var key: String?
            public var expand: String?

            public init(accountID: String? = nil, username: String? = nil, key: String? = nil, expand: String? = nil) {
                self.accountID = accountID
                self.username = username
                self.key = key
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(accountID, forKey: "accountId")
                encoder.encode(username, forKey: "username")
                encoder.encode(key, forKey: "key")
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }

        /// Create user
        ///
        /// Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
        /// 
        /// If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func post(_ body: JiraKit.NewUserDetails) -> Request<JiraKit.User> {
            Request(path: path, method: "POST", body: body, id: "createUser")
        }

        /// Delete user
        ///
        /// Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
        /// 
        /// **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
        public func delete(parameters: DeleteParameters) -> Request<Void> {
            Request(path: path, method: "DELETE", query: parameters.asQuery, id: "removeUser")
        }

        public struct DeleteParameters {
            /// Example: "5b10ac8d82e05b22cc7d4ef5"
            public var accountID: String
            public var username: String?
            public var key: String?

            public init(accountID: String, username: String? = nil, key: String? = nil) {
                self.accountID = accountID
                self.username = username
                self.key = key
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(accountID, forKey: "accountId")
                encoder.encode(username, forKey: "username")
                encoder.encode(key, forKey: "key")
                return encoder.items
            }
        }
    }
}
