// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.User.Assignable {
    public var multiProjectSearch: MultiProjectSearch {
        MultiProjectSearch(path: path + "/multiProjectSearch")
    }

    public struct MultiProjectSearch {
        /// Path: `/rest/api/3/user/assignable/multiProjectSearch`
        public let path: String

        /// Find users assignable to projects
        ///
        /// Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.
        /// 
        /// This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// 
        /// Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** None.
        public func get(parameters: GetParameters) -> Request<[JiraKit.User]> {
            Request(path: path, method: "GET", query: parameters.asQuery, id: "findBulkAssignableUsers")
        }

        public struct GetParameters {
            /// Example: "query"
            public var query: String?
            public var username: String?
            public var accountID: String?
            public var projectKeys: String
            public var startAt: Int32?
            public var maxResults: Int32?

            public init(query: String? = nil, username: String? = nil, accountID: String? = nil, projectKeys: String, startAt: Int32? = nil, maxResults: Int32? = nil) {
                self.query = query
                self.username = username
                self.accountID = accountID
                self.projectKeys = projectKeys
                self.startAt = startAt
                self.maxResults = maxResults
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(query, forKey: "query")
                encoder.encode(username, forKey: "username")
                encoder.encode(accountID, forKey: "accountId")
                encoder.encode(projectKeys, forKey: "projectKeys")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                return encoder.items
            }
        }
    }
}
