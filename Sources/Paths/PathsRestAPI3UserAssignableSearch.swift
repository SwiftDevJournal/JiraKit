// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.User.Assignable {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/rest/api/3/user/assignable/search`
        public let path: String

        /// Find users assignable to issues
        ///
        /// Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:
        /// 
        ///  *  a new issue, by providing the `projectKeyOrId`.
        ///  *  an updated issue, by providing the `issueKey`.
        ///  *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).
        /// 
        /// In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.
        /// 
        /// This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// 
        /// Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// 
        /// **[Permissions](#permissions) required:** Permission to access Jira.
        public func get(parameters: GetParameters? = nil) -> Request<[JiraKit.User]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "findAssignableUsers")
        }

        public struct GetParameters {
            /// Example: "query"
            public var query: String?
            public var sessionID: String?
            public var username: String?
            public var accountID: String?
            public var project: String?
            public var issueKey: String?
            public var startAt: Int?
            public var maxResults: Int?
            public var actionDescriptorID: Int?
            public var isRecommend: Bool?

            public init(query: String? = nil, sessionID: String? = nil, username: String? = nil, accountID: String? = nil, project: String? = nil, issueKey: String? = nil, startAt: Int? = nil, maxResults: Int? = nil, actionDescriptorID: Int? = nil, isRecommend: Bool? = nil) {
                self.query = query
                self.sessionID = sessionID
                self.username = username
                self.accountID = accountID
                self.project = project
                self.issueKey = issueKey
                self.startAt = startAt
                self.maxResults = maxResults
                self.actionDescriptorID = actionDescriptorID
                self.isRecommend = isRecommend
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(query, forKey: "query")
                encoder.encode(sessionID, forKey: "sessionId")
                encoder.encode(username, forKey: "username")
                encoder.encode(accountID, forKey: "accountId")
                encoder.encode(project, forKey: "project")
                encoder.encode(issueKey, forKey: "issueKey")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(actionDescriptorID, forKey: "actionDescriptorId")
                encoder.encode(isRecommend, forKey: "recommend")
                return encoder.items
            }
        }
    }
}
