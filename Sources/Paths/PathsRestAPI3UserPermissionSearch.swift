// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.User.Permission {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/rest/api/3/user/permission/search`
        public let path: String

        /// Find users with permissions
        ///
        /// Returns a list of users who fulfill these criteria:
        /// 
        ///  *  their user attributes match a search string.
        ///  *  they have a set of permissions for a project or issue.
        /// 
        /// If no search string is provided, a list of all users with the permissions is returned.
        /// 
        /// This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// 
        /// Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:**
        /// 
        ///  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
        ///  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
        public func get(parameters: GetParameters) -> Request<[JiraKit.User]> {
            Request(method: "GET", url: path, query: parameters.asQuery, id: "findUsersWithAllPermissions")
        }

        public struct GetParameters {
            /// Example: "query"
            public var query: String?
            public var username: String?
            public var accountID: String?
            public var permissions: String
            public var issueKey: String?
            public var projectKey: String?
            public var startAt: Int32?
            public var maxResults: Int32?

            public init(query: String? = nil, username: String? = nil, accountID: String? = nil, permissions: String, issueKey: String? = nil, projectKey: String? = nil, startAt: Int32? = nil, maxResults: Int32? = nil) {
                self.query = query
                self.username = username
                self.accountID = accountID
                self.permissions = permissions
                self.issueKey = issueKey
                self.projectKey = projectKey
                self.startAt = startAt
                self.maxResults = maxResults
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(query, forKey: "query")
                encoder.encode(username, forKey: "username")
                encoder.encode(accountID, forKey: "accountId")
                encoder.encode(permissions, forKey: "permissions")
                encoder.encode(issueKey, forKey: "issueKey")
                encoder.encode(projectKey, forKey: "projectKey")
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                return encoder.items
            }
        }
    }
}
