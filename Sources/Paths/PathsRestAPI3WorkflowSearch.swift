// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.API.__3.Workflow {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/rest/api/3/workflow/search`
        public let path: String

        /// Get workflows paginated
        ///
        /// Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.
        /// 
        /// This operation does not return next-gen workflows.
        /// 
        /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        public func get(parameters: GetParameters? = nil) -> Request<JiraKit.PageBeanWorkflow> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getWorkflowsPaginated")
        }

        public struct GetParameters {
            public var startAt: Int64?
            public var maxResults: Int32?
            public var workflowName: [String]?
            public var expand: String?
            public var queryString: String?
            public var orderBy: OrderBy?
            public var isActive: Bool?

            public enum OrderBy: String, Codable, CaseIterable {
                case name
                case minusname = "-name"
                case plusname = "+name"
                case created
                case minuscreated = "-created"
                case pluscreated = "+created"
                case updated
                case plusupdated = "+updated"
                case minusupdated = "-updated"
            }

            public init(startAt: Int64? = nil, maxResults: Int32? = nil, workflowName: [String]? = nil, expand: String? = nil, queryString: String? = nil, orderBy: OrderBy? = nil, isActive: Bool? = nil) {
                self.startAt = startAt
                self.maxResults = maxResults
                self.workflowName = workflowName
                self.expand = expand
                self.queryString = queryString
                self.orderBy = orderBy
                self.isActive = isActive
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startAt, forKey: "startAt")
                encoder.encode(maxResults, forKey: "maxResults")
                encoder.encode(workflowName, forKey: "workflowName")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(queryString, forKey: "queryString")
                encoder.encode(orderBy, forKey: "orderBy")
                encoder.encode(isActive, forKey: "isActive")
                return encoder.items
            }
        }
    }
}
